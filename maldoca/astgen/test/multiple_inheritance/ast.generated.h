// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_MULTIPLE_INHERITANCE_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_MULTIPLE_INHERITANCE_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

class MSourceLocation {
 public:
  explicit MSourceLocation(
      double start,
      double end);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<MSourceLocation>> FromJson(const nlohmann::json& json);

  double start() const;
  void set_start(double start);

  double end() const;
  void set_end(double end);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<double> GetStart(const nlohmann::json& json);
  static absl::StatusOr<double> GetEnd(const nlohmann::json& json);

 private:
  double start_;
  double end_;
};

enum class MNodeType {
  kObjectMethod,
};

absl::string_view MNodeTypeToString(MNodeType node_type);
absl::StatusOr<MNodeType> StringToMNodeType(absl::string_view s);

class MNode {
 public:
  explicit MNode(
      std::unique_ptr<MSourceLocation> loc);

  virtual ~MNode() = default;

  virtual MNodeType node_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<MNode>> FromJson(const nlohmann::json& json);

  MSourceLocation* loc();
  const MSourceLocation* loc() const;
  void set_loc(std::unique_ptr<MSourceLocation> loc);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<MSourceLocation>> GetLoc(const nlohmann::json& json);

 private:
  std::unique_ptr<MSourceLocation> loc_;
};

class MFunction : public virtual MNode {
 public:
  explicit MFunction(
      std::unique_ptr<MSourceLocation> loc,
      std::string id);

  static absl::StatusOr<std::unique_ptr<MFunction>> FromJson(const nlohmann::json& json);

  absl::string_view id() const;
  void set_id(std::string id);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetId(const nlohmann::json& json);

 private:
  std::string id_;
};

class MObjectMember : public virtual MNode {
 public:
  explicit MObjectMember(
      std::unique_ptr<MSourceLocation> loc,
      bool computed);

  static absl::StatusOr<std::unique_ptr<MObjectMember>> FromJson(const nlohmann::json& json);

  bool computed() const;
  void set_computed(bool computed);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<bool> GetComputed(const nlohmann::json& json);

 private:
  bool computed_;
};

class MObjectMethod : public virtual MObjectMember, public virtual MFunction {
 public:
  explicit MObjectMethod(
      std::unique_ptr<MSourceLocation> loc,
      bool computed,
      std::string id);

  MNodeType node_type() const override {
    return MNodeType::kObjectMethod;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<MObjectMethod>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_MULTIPLE_INHERITANCE_AST_GENERATED_H_
