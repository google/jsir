// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_TYPED_LAMBDA_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_TYPED_LAMBDA_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class TlNodeType {
  kLiteral,
  kVariable,
  kFunctionDefinition,
  kFunctionCall,
  kLiteralType,
  kFunctionType,
};

absl::string_view TlNodeTypeToString(TlNodeType node_type);
absl::StatusOr<TlNodeType> StringToTlNodeType(absl::string_view s);

class TlNode {
 public:
  virtual ~TlNode() = default;

  virtual TlNodeType node_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<TlNode>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class TlExpression : public virtual TlNode {
 public:
  static absl::StatusOr<std::unique_ptr<TlExpression>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class TlType : public virtual TlNode {
 public:
  static absl::StatusOr<std::unique_ptr<TlType>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class TlLiteral : public virtual TlExpression {
 public:
  explicit TlLiteral(
      std::variant<bool, int64_t, double, std::string> value);

  TlNodeType node_type() const override {
    return TlNodeType::kLiteral;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlLiteral>> FromJson(const nlohmann::json& json);

  std::variant<bool, int64_t, double, absl::string_view> value() const;
  void set_value(std::variant<bool, int64_t, double, std::string> value);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::variant<bool, int64_t, double, std::string>> GetValue(const nlohmann::json& json);

 private:
  std::variant<bool, int64_t, double, std::string> value_;
};

class TlVariable : public virtual TlExpression {
 public:
  explicit TlVariable(
      std::string identifier);

  TlNodeType node_type() const override {
    return TlNodeType::kVariable;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlVariable>> FromJson(const nlohmann::json& json);

  absl::string_view identifier() const;
  void set_identifier(std::string identifier);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetIdentifier(const nlohmann::json& json);

 private:
  std::string identifier_;
};

class TlFunctionDefinition : public virtual TlExpression {
 public:
  explicit TlFunctionDefinition(
      std::unique_ptr<TlVariable> parameter,
      std::unique_ptr<TlType> parameter_type,
      std::unique_ptr<TlExpression> body);

  TlNodeType node_type() const override {
    return TlNodeType::kFunctionDefinition;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlFunctionDefinition>> FromJson(const nlohmann::json& json);

  TlVariable* parameter();
  const TlVariable* parameter() const;
  void set_parameter(std::unique_ptr<TlVariable> parameter);

  TlType* parameter_type();
  const TlType* parameter_type() const;
  void set_parameter_type(std::unique_ptr<TlType> parameter_type);

  TlExpression* body();
  const TlExpression* body() const;
  void set_body(std::unique_ptr<TlExpression> body);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<TlVariable>> GetParameter(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<TlType>> GetParameterType(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<TlExpression>> GetBody(const nlohmann::json& json);

 private:
  std::unique_ptr<TlVariable> parameter_;
  std::unique_ptr<TlType> parameter_type_;
  std::unique_ptr<TlExpression> body_;
};

class TlFunctionCall : public virtual TlExpression {
 public:
  explicit TlFunctionCall(
      std::unique_ptr<TlExpression> caller,
      std::unique_ptr<TlExpression> callee);

  TlNodeType node_type() const override {
    return TlNodeType::kFunctionCall;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlFunctionCall>> FromJson(const nlohmann::json& json);

  TlExpression* caller();
  const TlExpression* caller() const;
  void set_caller(std::unique_ptr<TlExpression> caller);

  TlExpression* callee();
  const TlExpression* callee() const;
  void set_callee(std::unique_ptr<TlExpression> callee);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<TlExpression>> GetCaller(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<TlExpression>> GetCallee(const nlohmann::json& json);

 private:
  std::unique_ptr<TlExpression> caller_;
  std::unique_ptr<TlExpression> callee_;
};

class TlLiteralType : public virtual TlType {
 public:
  TlNodeType node_type() const override {
    return TlNodeType::kLiteralType;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlLiteralType>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class TlFunctionType : public virtual TlType {
 public:
  explicit TlFunctionType(
      std::unique_ptr<TlType> parameter_type,
      std::unique_ptr<TlType> body_type);

  TlNodeType node_type() const override {
    return TlNodeType::kFunctionType;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<TlFunctionType>> FromJson(const nlohmann::json& json);

  TlType* parameter_type();
  const TlType* parameter_type() const;
  void set_parameter_type(std::unique_ptr<TlType> parameter_type);

  TlType* body_type();
  const TlType* body_type() const;
  void set_body_type(std::unique_ptr<TlType> body_type);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<TlType>> GetParameterType(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<TlType>> GetBodyType(const nlohmann::json& json);

 private:
  std::unique_ptr<TlType> parameter_type_;
  std::unique_ptr<TlType> body_type_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_TYPED_LAMBDA_AST_GENERATED_H_
