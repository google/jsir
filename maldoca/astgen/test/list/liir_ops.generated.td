// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_LIST_LIIR_OPS_GENERATED_TD_
#define MALDOCA_ASTGEN_TEST_LIST_LIIR_OPS_GENERATED_TD_

include "mlir/Interfaces/ControlFlowInterfaces.td"
include "mlir/Interfaces/InferTypeOpInterface.td"
include "mlir/Interfaces/LoopLikeInterface.td"
include "mlir/Interfaces/SideEffectInterfaces.td"
include "mlir/IR/OpBase.td"
include "mlir/IR/SymbolInterfaces.td"
include "maldoca/astgen/test/list/interfaces.td"
include "maldoca/astgen/test/list/liir_dialect.td"
include "maldoca/astgen/test/list/liir_types.td"

def LiirClass1Op : Liir_Op<"class1", []> {
  let results = (outs
    LiirAnyType
  );
}

def LiirClass2Op : Liir_Op<"class2", []> {
  let results = (outs
    LiirAnyType
  );
}

def LiirSimpleListOp : Liir_Op<"simple_list", []> {
  let arguments = (ins
    TypedArrayAttrBase<StrAttr, "">: $strings,
    Variadic<AnyType>: $operations
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirOptionalListOp : Liir_Op<"optional_list", []> {
  let arguments = (ins
    OptionalAttr<TypedArrayAttrBase<StrAttr, "">>: $strings
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirListOfOptionalOp : Liir_Op<"list_of_optional", []> {
  let arguments = (ins
    TypedArrayAttrBase<OptionalAttr<StrAttr>, "">: $strings,
    Variadic<AnyType>: $operations
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirListOfVariantOp : Liir_Op<"list_of_variant", []> {
  let arguments = (ins
    TypedArrayAttrBase<AnyAttrOf<[BoolAttr, StrAttr]>, "">: $variants,
    Variadic<AnyType>: $operations
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirOptionalListOfOptionalOp : Liir_Op<"optional_list_of_optional", []> {
  let arguments = (ins
    OptionalAttr<TypedArrayAttrBase<OptionalAttr<StrAttr>, "">>: $variants
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirOptionalListOfVariantOp : Liir_Op<"optional_list_of_variant", []> {
  let arguments = (ins
    OptionalAttr<TypedArrayAttrBase<AnyAttrOf<[BoolAttr, StrAttr]>, "">>: $variants
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirListOfOptionalVariantOp : Liir_Op<"list_of_optional_variant", []> {
  let arguments = (ins
    TypedArrayAttrBase<OptionalAttr<AnyAttrOf<[BoolAttr, StrAttr]>>, "">: $variants,
    Variadic<AnyType>: $operations
  );

  let results = (outs
    LiirAnyType
  );
}

def LiirOptionalListOfOptionalVariantOp : Liir_Op<"optional_list_of_optional_variant", []> {
  let arguments = (ins
    OptionalAttr<TypedArrayAttrBase<OptionalAttr<AnyAttrOf<[BoolAttr, StrAttr]>>, "">>: $variants
  );

  let results = (outs
    LiirAnyType
  );
}

#endif  // MALDOCA_ASTGEN_TEST_LIST_LIIR_OPS_GENERATED_TD_
