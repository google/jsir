// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/list/conversion/liir_to_ast.h"

#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "llvm/ADT/TypeSwitch.h"
#include "llvm/Support/Casting.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/base/status_macros.h"
#include "maldoca/astgen/test/list/ast.generated.h"
#include "maldoca/astgen/test/list/ir.h"

namespace maldoca {

absl::StatusOr<std::unique_ptr<LiClass1>>
LiirToAst::VisitClass1(LiirClass1Op op) {
  return Create<LiClass1>(
      op);
}

absl::StatusOr<std::unique_ptr<LiClass2>>
LiirToAst::VisitClass2(LiirClass2Op op) {
  return Create<LiClass2>(
      op);
}

absl::StatusOr<std::unique_ptr<LiSimpleList>>
LiirToAst::VisitSimpleList(LiirSimpleListOp op) {
  std::vector<std::string> strings;
  for (mlir::Attribute mlir_strings_element_unchecked : op.getStringsAttr().getValue()) {
    auto strings_element_attr = llvm::dyn_cast<mlir::StringAttr>(mlir_strings_element_unchecked);
    if (strings_element_attr == nullptr) {
      return absl::InvalidArgumentError("Invalid attribute.");
    }
    std::string strings_element = strings_element_attr.str();
    strings.push_back(std::move(strings_element));
  }
  std::vector<std::unique_ptr<LiClass1>> operations;
  for (mlir::Value mlir_operations_element_unchecked : op.getOperations()) {
    auto operations_element_op = llvm::dyn_cast<LiirClass1Op>(mlir_operations_element_unchecked.getDefiningOp());
    if (operations_element_op == nullptr) {
      return absl::InvalidArgumentError(
          absl::StrCat("Expected LiirClass1Op, got ",
                       mlir_operations_element_unchecked.getDefiningOp()->getName().getStringRef().str(), "."));
    }
    MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<LiClass1> operations_element, VisitClass1(operations_element_op));
    operations.push_back(std::move(operations_element));
  }
  return Create<LiSimpleList>(
      op,
      std::move(strings),
      std::move(operations));
}

absl::StatusOr<std::unique_ptr<LiOptionalList>>
LiirToAst::VisitOptionalList(LiirOptionalListOp op) {
  std::optional<std::vector<std::string>> strings;
  if (op.getStringsAttr() != nullptr) {
    std::vector<std::string> strings_value;
    for (mlir::Attribute mlir_strings_element_unchecked : op.getStringsAttr().getValue()) {
      auto strings_element_attr = llvm::dyn_cast<mlir::StringAttr>(mlir_strings_element_unchecked);
      if (strings_element_attr == nullptr) {
        return absl::InvalidArgumentError("Invalid attribute.");
      }
      std::string strings_element = strings_element_attr.str();
      strings_value.push_back(std::move(strings_element));
    }
    strings = std::move(strings_value);
  }
  return Create<LiOptionalList>(
      op,
      std::move(strings));
}

absl::StatusOr<std::unique_ptr<LiListOfOptional>>
LiirToAst::VisitListOfOptional(LiirListOfOptionalOp op) {
  std::vector<std::optional<std::string>> strings;
  for (mlir::Attribute mlir_strings_element_unchecked : op.getStringsAttr().getValue()) {
    std::optional<std::string> strings_element;
    if (mlir_strings_element_unchecked != nullptr) {
      auto strings_element_attr = llvm::dyn_cast<mlir::StringAttr>(mlir_strings_element_unchecked);
      if (strings_element_attr == nullptr) {
        return absl::InvalidArgumentError("Invalid attribute.");
      }
      strings_element = strings_element_attr.str();
    }
    strings.push_back(std::move(strings_element));
  }
  std::vector<std::optional<std::unique_ptr<LiClass1>>> operations;
  for (mlir::Value mlir_operations_element_unchecked : op.getOperations()) {
    std::optional<std::unique_ptr<LiClass1>> operations_element;
    if (!llvm::isa<LiirNoneOp>(mlir_operations_element_unchecked.getDefiningOp())) {
      auto operations_element_op = llvm::dyn_cast<LiirClass1Op>(mlir_operations_element_unchecked.getDefiningOp());
      if (operations_element_op == nullptr) {
        return absl::InvalidArgumentError(
            absl::StrCat("Expected LiirClass1Op, got ",
                         mlir_operations_element_unchecked.getDefiningOp()->getName().getStringRef().str(), "."));
      }
      MALDOCA_ASSIGN_OR_RETURN(operations_element, VisitClass1(operations_element_op));
    }
    operations.push_back(std::move(operations_element));
  }
  return Create<LiListOfOptional>(
      op,
      std::move(strings),
      std::move(operations));
}

absl::StatusOr<std::unique_ptr<LiListOfVariant>>
LiirToAst::VisitListOfVariant(LiirListOfVariantOp op) {
  std::vector<std::variant<bool, std::string>> variants;
  for (mlir::Attribute mlir_variants_element_unchecked : op.getVariantsAttr().getValue()) {
    std::variant<bool, std::string> variants_element;
    if (auto mlir_variants_element = llvm::dyn_cast<mlir::BoolAttr>(mlir_variants_element_unchecked)) {
      variants_element = mlir_variants_element.getValue();
    } else if (auto mlir_variants_element = llvm::dyn_cast<mlir::StringAttr>(mlir_variants_element_unchecked)) {
      variants_element = mlir_variants_element.str();
    } else {
      return absl::InvalidArgumentError("mlir_variants_element_unchecked has invalid type.");
    }
    variants.push_back(std::move(variants_element));
  }
  std::vector<std::variant<std::unique_ptr<LiClass1>, std::unique_ptr<LiClass2>>> operations;
  for (mlir::Value mlir_operations_element_unchecked : op.getOperations()) {
    std::variant<std::unique_ptr<LiClass1>, std::unique_ptr<LiClass2>> operations_element;
    if (auto mlir_operations_element = llvm::dyn_cast<LiirClass1Op>(mlir_operations_element_unchecked.getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(operations_element, VisitClass1(mlir_operations_element));
    } else if (auto mlir_operations_element = llvm::dyn_cast<LiirClass2Op>(mlir_operations_element_unchecked.getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(operations_element, VisitClass2(mlir_operations_element));
    } else {
      return absl::InvalidArgumentError("mlir_operations_element_unchecked.getDefiningOp() has invalid type.");
    }
    operations.push_back(std::move(operations_element));
  }
  return Create<LiListOfVariant>(
      op,
      std::move(variants),
      std::move(operations));
}

absl::StatusOr<std::unique_ptr<LiOptionalListOfOptional>>
LiirToAst::VisitOptionalListOfOptional(LiirOptionalListOfOptionalOp op) {
  std::optional<std::vector<std::optional<std::string>>> variants;
  if (op.getVariantsAttr() != nullptr) {
    std::vector<std::optional<std::string>> variants_value;
    for (mlir::Attribute mlir_variants_element_unchecked : op.getVariantsAttr().getValue()) {
      std::optional<std::string> variants_element;
      if (mlir_variants_element_unchecked != nullptr) {
        auto variants_element_attr = llvm::dyn_cast<mlir::StringAttr>(mlir_variants_element_unchecked);
        if (variants_element_attr == nullptr) {
          return absl::InvalidArgumentError("Invalid attribute.");
        }
        variants_element = variants_element_attr.str();
      }
      variants_value.push_back(std::move(variants_element));
    }
    variants = std::move(variants_value);
  }
  return Create<LiOptionalListOfOptional>(
      op,
      std::move(variants));
}

absl::StatusOr<std::unique_ptr<LiOptionalListOfVariant>>
LiirToAst::VisitOptionalListOfVariant(LiirOptionalListOfVariantOp op) {
  std::optional<std::vector<std::variant<bool, std::string>>> variants;
  if (op.getVariantsAttr() != nullptr) {
    std::vector<std::variant<bool, std::string>> variants_value;
    for (mlir::Attribute mlir_variants_element_unchecked : op.getVariantsAttr().getValue()) {
      std::variant<bool, std::string> variants_element;
      if (auto mlir_variants_element = llvm::dyn_cast<mlir::BoolAttr>(mlir_variants_element_unchecked)) {
        variants_element = mlir_variants_element.getValue();
      } else if (auto mlir_variants_element = llvm::dyn_cast<mlir::StringAttr>(mlir_variants_element_unchecked)) {
        variants_element = mlir_variants_element.str();
      } else {
        return absl::InvalidArgumentError("mlir_variants_element_unchecked has invalid type.");
      }
      variants_value.push_back(std::move(variants_element));
    }
    variants = std::move(variants_value);
  }
  return Create<LiOptionalListOfVariant>(
      op,
      std::move(variants));
}

absl::StatusOr<std::unique_ptr<LiListOfOptionalVariant>>
LiirToAst::VisitListOfOptionalVariant(LiirListOfOptionalVariantOp op) {
  std::vector<std::optional<std::variant<bool, std::string>>> variants;
  for (mlir::Attribute mlir_variants_element_unchecked : op.getVariantsAttr().getValue()) {
    std::optional<std::variant<bool, std::string>> variants_element;
    if (mlir_variants_element_unchecked != nullptr) {
      if (auto mlir_variants_element = llvm::dyn_cast<mlir::BoolAttr>(mlir_variants_element_unchecked)) {
        variants_element = mlir_variants_element.getValue();
      } else if (auto mlir_variants_element = llvm::dyn_cast<mlir::StringAttr>(mlir_variants_element_unchecked)) {
        variants_element = mlir_variants_element.str();
      } else {
        return absl::InvalidArgumentError("mlir_variants_element_unchecked has invalid type.");
      }
    }
    variants.push_back(std::move(variants_element));
  }
  std::vector<std::optional<std::variant<std::unique_ptr<LiClass1>, std::unique_ptr<LiClass2>>>> operations;
  for (mlir::Value mlir_operations_element_unchecked : op.getOperations()) {
    std::optional<std::variant<std::unique_ptr<LiClass1>, std::unique_ptr<LiClass2>>> operations_element;
    if (!llvm::isa<LiirNoneOp>(mlir_operations_element_unchecked.getDefiningOp())) {
      if (auto mlir_operations_element = llvm::dyn_cast<LiirClass1Op>(mlir_operations_element_unchecked.getDefiningOp())) {
        MALDOCA_ASSIGN_OR_RETURN(operations_element, VisitClass1(mlir_operations_element));
      } else if (auto mlir_operations_element = llvm::dyn_cast<LiirClass2Op>(mlir_operations_element_unchecked.getDefiningOp())) {
        MALDOCA_ASSIGN_OR_RETURN(operations_element, VisitClass2(mlir_operations_element));
      } else {
        return absl::InvalidArgumentError("mlir_operations_element_unchecked.getDefiningOp() has invalid type.");
      }
    }
    operations.push_back(std::move(operations_element));
  }
  return Create<LiListOfOptionalVariant>(
      op,
      std::move(variants),
      std::move(operations));
}

absl::StatusOr<std::unique_ptr<LiOptionalListOfOptionalVariant>>
LiirToAst::VisitOptionalListOfOptionalVariant(LiirOptionalListOfOptionalVariantOp op) {
  std::optional<std::vector<std::optional<std::variant<bool, std::string>>>> variants;
  if (op.getVariantsAttr() != nullptr) {
    std::vector<std::optional<std::variant<bool, std::string>>> variants_value;
    for (mlir::Attribute mlir_variants_element_unchecked : op.getVariantsAttr().getValue()) {
      std::optional<std::variant<bool, std::string>> variants_element;
      if (mlir_variants_element_unchecked != nullptr) {
        if (auto mlir_variants_element = llvm::dyn_cast<mlir::BoolAttr>(mlir_variants_element_unchecked)) {
          variants_element = mlir_variants_element.getValue();
        } else if (auto mlir_variants_element = llvm::dyn_cast<mlir::StringAttr>(mlir_variants_element_unchecked)) {
          variants_element = mlir_variants_element.str();
        } else {
          return absl::InvalidArgumentError("mlir_variants_element_unchecked has invalid type.");
        }
      }
      variants_value.push_back(std::move(variants_element));
    }
    variants = std::move(variants_value);
  }
  return Create<LiOptionalListOfOptionalVariant>(
      op,
      std::move(variants));
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
