// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cmath>
#include <limits>
#include <ostream>
#include <string>
#include <utility>

#include "maldoca/astgen/test/list/ast.generated.h"
#include "absl/log/log.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

void MaybeAddComma(std::ostream &os, bool &needs_comma) {
  if (needs_comma) {
    os << ",";
  }
  needs_comma = true;
}

// =============================================================================
// LiClass1
// =============================================================================

void LiClass1::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void LiClass1::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiClass1::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiClass2
// =============================================================================

void LiClass2::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void LiClass2::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiClass2::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiSimpleList
// =============================================================================

void LiSimpleList::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"strings\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : strings_) {
      MaybeAddComma(os, needs_comma);
      os << (nlohmann::json(element)).dump();
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"operations\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : operations_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void LiSimpleList::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiSimpleList::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiOptionalList
// =============================================================================

void LiOptionalList::SerializeFields(std::ostream& os, bool &needs_comma) const {
  if (strings_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"strings\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : strings_.value()) {
        MaybeAddComma(os, needs_comma);
        os << (nlohmann::json(element)).dump();
      }
    }
    os << "]";
  }
}

void LiOptionalList::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiOptionalList::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiListOfOptional
// =============================================================================

void LiListOfOptional::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"strings\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : strings_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        os << (nlohmann::json(element.value())).dump();
      } else {
        os << "null";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"operations\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : operations_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        element.value()->Serialize(os);
      } else {
        os << "null";
      }
    }
  }
  os << "]";
}

void LiListOfOptional::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiListOfOptional::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiListOfVariant
// =============================================================================

void LiListOfVariant::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"variants\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : variants_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          os << (nlohmann::json(std::get<0>(element))).dump();
          break;
        }
        case 1: {
          os << (nlohmann::json(std::get<1>(element))).dump();
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"operations\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : operations_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void LiListOfVariant::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiListOfVariant::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiOptionalListOfOptional
// =============================================================================

void LiOptionalListOfOptional::SerializeFields(std::ostream& os, bool &needs_comma) const {
  if (variants_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"variants\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : variants_.value()) {
        MaybeAddComma(os, needs_comma);
        if (element.has_value()) {
          os << (nlohmann::json(element.value())).dump();
        } else {
          os << "null";
        }
      }
    }
    os << "]";
  }
}

void LiOptionalListOfOptional::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiOptionalListOfOptional::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiOptionalListOfVariant
// =============================================================================

void LiOptionalListOfVariant::SerializeFields(std::ostream& os, bool &needs_comma) const {
  if (variants_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"variants\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : variants_.value()) {
        MaybeAddComma(os, needs_comma);
        switch (element.index()) {
          case 0: {
            os << (nlohmann::json(std::get<0>(element))).dump();
            break;
          }
          case 1: {
            os << (nlohmann::json(std::get<1>(element))).dump();
            break;
          }
          default:
            LOG(FATAL) << "Unreachable code.";
        }
      }
    }
    os << "]";
  }
}

void LiOptionalListOfVariant::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiOptionalListOfVariant::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiListOfOptionalVariant
// =============================================================================

void LiListOfOptionalVariant::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"variants\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : variants_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        switch (element.value().index()) {
          case 0: {
            os << (nlohmann::json(std::get<0>(element.value()))).dump();
            break;
          }
          case 1: {
            os << (nlohmann::json(std::get<1>(element.value()))).dump();
            break;
          }
          default:
            LOG(FATAL) << "Unreachable code.";
        }
      } else {
        os << "null";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"operations\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : operations_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        switch (element.value().index()) {
          case 0: {
            std::get<0>(element.value())->Serialize(os);
            break;
          }
          case 1: {
            std::get<1>(element.value())->Serialize(os);
            break;
          }
          default:
            LOG(FATAL) << "Unreachable code.";
        }
      } else {
        os << "null";
      }
    }
  }
  os << "]";
}

void LiListOfOptionalVariant::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiListOfOptionalVariant::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LiOptionalListOfOptionalVariant
// =============================================================================

void LiOptionalListOfOptionalVariant::SerializeFields(std::ostream& os, bool &needs_comma) const {
  if (variants_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"variants\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : variants_.value()) {
        MaybeAddComma(os, needs_comma);
        if (element.has_value()) {
          switch (element.value().index()) {
            case 0: {
              os << (nlohmann::json(std::get<0>(element.value()))).dump();
              break;
            }
            case 1: {
              os << (nlohmann::json(std::get<1>(element.value()))).dump();
              break;
            }
            default:
              LOG(FATAL) << "Unreachable code.";
          }
        } else {
          os << "null";
        }
      }
    }
    os << "]";
  }
}

void LiOptionalListOfOptionalVariant::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    LiOptionalListOfOptionalVariant::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
