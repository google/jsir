// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_ENUM_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_ENUM_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class EUnaryOperator {
  kMinus,
  kPlus,
  kNot,
  kBitwiseNot,
  kTypeOf,
  kVoid,
  kDelete,
  kThrow,
};

absl::string_view EUnaryOperatorToString(EUnaryOperator unary_operator);
absl::StatusOr<EUnaryOperator> StringToEUnaryOperator(absl::string_view s);

enum class EEscapedChar {
  kTab,
  kBackslash,
};

absl::string_view EEscapedCharToString(EEscapedChar escaped_char);
absl::StatusOr<EEscapedChar> StringToEEscapedChar(absl::string_view s);

class ENode {
 public:
  explicit ENode(
      EUnaryOperator unary_operator,
      EEscapedChar escaped_char);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<ENode>> FromJson(const nlohmann::json& json);

  EUnaryOperator unary_operator() const;
  void set_unary_operator(EUnaryOperator unary_operator);

  EEscapedChar escaped_char() const;
  void set_escaped_char(EEscapedChar escaped_char);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<EUnaryOperator> GetUnaryOperator(const nlohmann::json& json);
  static absl::StatusOr<EEscapedChar> GetEscapedChar(const nlohmann::json& json);

 private:
  EUnaryOperator unary_operator_;
  EEscapedChar escaped_char_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_ENUM_AST_GENERATED_H_
