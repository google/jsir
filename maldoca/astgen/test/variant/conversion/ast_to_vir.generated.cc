// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/variant/conversion/ast_to_vir.h"

#include <memory>
#include <utility>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/astgen/test/variant/ast.generated.h"
#include "maldoca/astgen/test/variant/ir.h"

namespace maldoca {

VirBaseClassOpInterface AstToVir::VisitBaseClass(const VBaseClass *node) {
  if (auto *derived_class1 = dynamic_cast<const VDerivedClass1 *>(node)) {
    return VisitDerivedClass1(derived_class1);
  }
  if (auto *derived_class2 = dynamic_cast<const VDerivedClass2 *>(node)) {
    return VisitDerivedClass2(derived_class2);
  }
  LOG(FATAL) << "Unreachable code.";
}

VirDerivedClass1Op AstToVir::VisitDerivedClass1(const VDerivedClass1 *node) {
  return CreateExpr<VirDerivedClass1Op>(node);
}

VirDerivedClass2Op AstToVir::VisitDerivedClass2(const VDerivedClass2 *node) {
  return CreateExpr<VirDerivedClass2Op>(node);
}

VirNodeOp AstToVir::VisitNode(const VNode *node) {
  mlir::Attribute mlir_simple_variant_builtin;
  switch (node->simple_variant_builtin().index()) {
    case 0: {
      mlir_simple_variant_builtin = builder_.getF64FloatAttr(std::get<0>(node->simple_variant_builtin()));
      break;
    }
    case 1: {
      mlir_simple_variant_builtin = builder_.getStringAttr(std::get<1>(node->simple_variant_builtin()));
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  mlir::Attribute mlir_nullable_variant_builtin;
  if (node->nullable_variant_builtin().has_value()) {
    switch (node->nullable_variant_builtin().value().index()) {
      case 0: {
        mlir_nullable_variant_builtin = builder_.getF64FloatAttr(std::get<0>(node->nullable_variant_builtin().value()));
        break;
      }
      case 1: {
        mlir_nullable_variant_builtin = builder_.getStringAttr(std::get<1>(node->nullable_variant_builtin().value()));
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
  mlir::Attribute mlir_optional_variant_builtin;
  if (node->optional_variant_builtin().has_value()) {
    switch (node->optional_variant_builtin().value().index()) {
      case 0: {
        mlir_optional_variant_builtin = builder_.getF64FloatAttr(std::get<0>(node->optional_variant_builtin().value()));
        break;
      }
      case 1: {
        mlir_optional_variant_builtin = builder_.getStringAttr(std::get<1>(node->optional_variant_builtin().value()));
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
  mlir::Value mlir_simple_variant_class;
  switch (node->simple_variant_class().index()) {
    case 0: {
      mlir_simple_variant_class = VisitDerivedClass1(std::get<0>(node->simple_variant_class()));
      break;
    }
    case 1: {
      mlir_simple_variant_class = VisitDerivedClass2(std::get<1>(node->simple_variant_class()));
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  mlir::Value mlir_nullable_variant_class;
  if (node->nullable_variant_class().has_value()) {
    switch (node->nullable_variant_class().value().index()) {
      case 0: {
        mlir_nullable_variant_class = VisitDerivedClass1(std::get<0>(node->nullable_variant_class().value()));
        break;
      }
      case 1: {
        mlir_nullable_variant_class = VisitDerivedClass2(std::get<1>(node->nullable_variant_class().value()));
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
  mlir::Value mlir_optional_variant_class;
  if (node->optional_variant_class().has_value()) {
    switch (node->optional_variant_class().value().index()) {
      case 0: {
        mlir_optional_variant_class = VisitDerivedClass1(std::get<0>(node->optional_variant_class().value()));
        break;
      }
      case 1: {
        mlir_optional_variant_class = VisitDerivedClass2(std::get<1>(node->optional_variant_class().value()));
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
  return CreateExpr<VirNodeOp>(node, mlir_simple_variant_builtin, mlir_nullable_variant_builtin, mlir_optional_variant_builtin, mlir_simple_variant_class, mlir_nullable_variant_class, mlir_optional_variant_class);
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
