// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/variant/conversion/vir_to_ast.h"

#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "llvm/ADT/TypeSwitch.h"
#include "llvm/Support/Casting.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/base/status_macros.h"
#include "maldoca/astgen/test/variant/ast.generated.h"
#include "maldoca/astgen/test/variant/ir.h"

namespace maldoca {

absl::StatusOr<std::unique_ptr<VBaseClass>>
VirToAst::VisitBaseClass(VirBaseClassOpInterface op) {
  using Ret = absl::StatusOr<std::unique_ptr<VBaseClass>>;
  return llvm::TypeSwitch<mlir::Operation*, Ret>(op)
    .Case([&](VirDerivedClass1Op op) {
      return VisitDerivedClass1(op);
    })
    .Case([&](VirDerivedClass2Op op) {
      return VisitDerivedClass2(op);
    })
    .Default([&](mlir::Operation* op) {
      return absl::InvalidArgumentError("Unrecognized op");
    });
}

absl::StatusOr<std::unique_ptr<VDerivedClass1>>
VirToAst::VisitDerivedClass1(VirDerivedClass1Op op) {
  return Create<VDerivedClass1>(
      op);
}

absl::StatusOr<std::unique_ptr<VDerivedClass2>>
VirToAst::VisitDerivedClass2(VirDerivedClass2Op op) {
  return Create<VDerivedClass2>(
      op);
}

absl::StatusOr<std::unique_ptr<VNode>>
VirToAst::VisitNode(VirNodeOp op) {
  std::variant<double, std::string> simple_variant_builtin;
  if (auto mlir_simple_variant_builtin = llvm::dyn_cast<mlir::FloatAttr>(op.getSimpleVariantBuiltinAttr())) {
    simple_variant_builtin = mlir_simple_variant_builtin.getValueAsDouble();
  } else if (auto mlir_simple_variant_builtin = llvm::dyn_cast<mlir::StringAttr>(op.getSimpleVariantBuiltinAttr())) {
    simple_variant_builtin = mlir_simple_variant_builtin.str();
  } else {
    return absl::InvalidArgumentError("op.getSimpleVariantBuiltinAttr() has invalid type.");
  }
  std::optional<std::variant<double, std::string>> nullable_variant_builtin;
  if (op.getNullableVariantBuiltinAttr() != nullptr) {
    if (auto mlir_nullable_variant_builtin = llvm::dyn_cast<mlir::FloatAttr>(op.getNullableVariantBuiltinAttr())) {
      nullable_variant_builtin = mlir_nullable_variant_builtin.getValueAsDouble();
    } else if (auto mlir_nullable_variant_builtin = llvm::dyn_cast<mlir::StringAttr>(op.getNullableVariantBuiltinAttr())) {
      nullable_variant_builtin = mlir_nullable_variant_builtin.str();
    } else {
      return absl::InvalidArgumentError("op.getNullableVariantBuiltinAttr() has invalid type.");
    }
  }
  std::optional<std::variant<double, std::string>> optional_variant_builtin;
  if (op.getOptionalVariantBuiltinAttr() != nullptr) {
    if (auto mlir_optional_variant_builtin = llvm::dyn_cast<mlir::FloatAttr>(op.getOptionalVariantBuiltinAttr())) {
      optional_variant_builtin = mlir_optional_variant_builtin.getValueAsDouble();
    } else if (auto mlir_optional_variant_builtin = llvm::dyn_cast<mlir::StringAttr>(op.getOptionalVariantBuiltinAttr())) {
      optional_variant_builtin = mlir_optional_variant_builtin.str();
    } else {
      return absl::InvalidArgumentError("op.getOptionalVariantBuiltinAttr() has invalid type.");
    }
  }
  std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>> simple_variant_class;
  if (auto mlir_simple_variant_class = llvm::dyn_cast<VirDerivedClass1Op>(op.getSimpleVariantClass().getDefiningOp())) {
    MALDOCA_ASSIGN_OR_RETURN(simple_variant_class, VisitDerivedClass1(mlir_simple_variant_class));
  } else if (auto mlir_simple_variant_class = llvm::dyn_cast<VirDerivedClass2Op>(op.getSimpleVariantClass().getDefiningOp())) {
    MALDOCA_ASSIGN_OR_RETURN(simple_variant_class, VisitDerivedClass2(mlir_simple_variant_class));
  } else {
    return absl::InvalidArgumentError("op.getSimpleVariantClass().getDefiningOp() has invalid type.");
  }
  std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> nullable_variant_class;
  if (op.getNullableVariantClass() != nullptr) {
    if (auto mlir_nullable_variant_class = llvm::dyn_cast<VirDerivedClass1Op>(op.getNullableVariantClass().getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(nullable_variant_class, VisitDerivedClass1(mlir_nullable_variant_class));
    } else if (auto mlir_nullable_variant_class = llvm::dyn_cast<VirDerivedClass2Op>(op.getNullableVariantClass().getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(nullable_variant_class, VisitDerivedClass2(mlir_nullable_variant_class));
    } else {
      return absl::InvalidArgumentError("op.getNullableVariantClass().getDefiningOp() has invalid type.");
    }
  }
  std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> optional_variant_class;
  if (op.getOptionalVariantClass() != nullptr) {
    if (auto mlir_optional_variant_class = llvm::dyn_cast<VirDerivedClass1Op>(op.getOptionalVariantClass().getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(optional_variant_class, VisitDerivedClass1(mlir_optional_variant_class));
    } else if (auto mlir_optional_variant_class = llvm::dyn_cast<VirDerivedClass2Op>(op.getOptionalVariantClass().getDefiningOp())) {
      MALDOCA_ASSIGN_OR_RETURN(optional_variant_class, VisitDerivedClass2(mlir_optional_variant_class));
    } else {
      return absl::InvalidArgumentError("op.getOptionalVariantClass().getDefiningOp() has invalid type.");
    }
  }
  return Create<VNode>(
      op,
      std::move(simple_variant_builtin),
      std::move(nullable_variant_builtin),
      std::move(optional_variant_builtin),
      std::move(simple_variant_class),
      std::move(nullable_variant_class),
      std::move(optional_variant_class));
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
