// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_VARIANT_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_VARIANT_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class VBaseClassType {
  kDerivedClass1,
  kDerivedClass2,
};

absl::string_view VBaseClassTypeToString(VBaseClassType base_class_type);
absl::StatusOr<VBaseClassType> StringToVBaseClassType(absl::string_view s);

class VBaseClass {
 public:
  virtual ~VBaseClass() = default;

  virtual VBaseClassType base_class_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<VBaseClass>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class VDerivedClass1 : public virtual VBaseClass {
 public:
  VBaseClassType base_class_type() const override {
    return VBaseClassType::kDerivedClass1;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<VDerivedClass1>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class VDerivedClass2 : public virtual VBaseClass {
 public:
  VBaseClassType base_class_type() const override {
    return VBaseClassType::kDerivedClass2;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<VDerivedClass2>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class VNode {
 public:
  explicit VNode(
      std::variant<double, std::string> simple_variant_builtin,
      std::optional<std::variant<double, std::string>> nullable_variant_builtin,
      std::optional<std::variant<double, std::string>> optional_variant_builtin,
      std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>> simple_variant_class,
      std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> nullable_variant_class,
      std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> optional_variant_class);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<VNode>> FromJson(const nlohmann::json& json);

  std::variant<double, absl::string_view> simple_variant_builtin() const;
  void set_simple_variant_builtin(std::variant<double, std::string> simple_variant_builtin);

  std::optional<std::variant<double, absl::string_view>> nullable_variant_builtin() const;
  void set_nullable_variant_builtin(std::optional<std::variant<double, std::string>> nullable_variant_builtin);

  std::optional<std::variant<double, absl::string_view>> optional_variant_builtin() const;
  void set_optional_variant_builtin(std::optional<std::variant<double, std::string>> optional_variant_builtin);

  std::variant<VDerivedClass1*, VDerivedClass2*> simple_variant_class();
  std::variant<const VDerivedClass1*, const VDerivedClass2*> simple_variant_class() const;
  void set_simple_variant_class(std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>> simple_variant_class);

  std::optional<std::variant<VDerivedClass1*, VDerivedClass2*>> nullable_variant_class();
  std::optional<std::variant<const VDerivedClass1*, const VDerivedClass2*>> nullable_variant_class() const;
  void set_nullable_variant_class(std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> nullable_variant_class);

  std::optional<std::variant<VDerivedClass1*, VDerivedClass2*>> optional_variant_class();
  std::optional<std::variant<const VDerivedClass1*, const VDerivedClass2*>> optional_variant_class() const;
  void set_optional_variant_class(std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> optional_variant_class);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::variant<double, std::string>> GetSimpleVariantBuiltin(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::variant<double, std::string>>> GetNullableVariantBuiltin(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::variant<double, std::string>>> GetOptionalVariantBuiltin(const nlohmann::json& json);
  static absl::StatusOr<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> GetSimpleVariantClass(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>>> GetNullableVariantClass(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>>> GetOptionalVariantClass(const nlohmann::json& json);

 private:
  std::variant<double, std::string> simple_variant_builtin_;
  std::optional<std::variant<double, std::string>> nullable_variant_builtin_;
  std::optional<std::variant<double, std::string>> optional_variant_builtin_;
  std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>> simple_variant_class_;
  std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> nullable_variant_class_;
  std::optional<std::variant<std::unique_ptr<VDerivedClass1>, std::unique_ptr<VDerivedClass2>>> optional_variant_class_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_VARIANT_AST_GENERATED_H_
