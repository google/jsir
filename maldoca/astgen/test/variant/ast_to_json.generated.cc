// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cmath>
#include <limits>
#include <ostream>
#include <string>
#include <utility>

#include "maldoca/astgen/test/variant/ast.generated.h"
#include "absl/log/log.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

void MaybeAddComma(std::ostream &os, bool &needs_comma) {
  if (needs_comma) {
    os << ",";
  }
  needs_comma = true;
}

// =============================================================================
// VBaseClass
// =============================================================================

void VBaseClass::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// VDerivedClass1
// =============================================================================

void VDerivedClass1::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void VDerivedClass1::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"DerivedClass1\"";
    VBaseClass::SerializeFields(os, needs_comma);
    VDerivedClass1::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// VDerivedClass2
// =============================================================================

void VDerivedClass2::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void VDerivedClass2::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"DerivedClass2\"";
    VBaseClass::SerializeFields(os, needs_comma);
    VDerivedClass2::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// VNode
// =============================================================================

void VNode::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (simple_variant_builtin_.index()) {
    case 0: {
      os << "\"simpleVariantBuiltin\":" << (nlohmann::json(std::get<0>(simple_variant_builtin_))).dump();
      break;
    }
    case 1: {
      os << "\"simpleVariantBuiltin\":" << (nlohmann::json(std::get<1>(simple_variant_builtin_))).dump();
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  if (nullable_variant_builtin_.has_value()) {
    switch (nullable_variant_builtin_.value().index()) {
      case 0: {
        os << "\"nullableVariantBuiltin\":" << (nlohmann::json(std::get<0>(nullable_variant_builtin_.value()))).dump();
        break;
      }
      case 1: {
        os << "\"nullableVariantBuiltin\":" << (nlohmann::json(std::get<1>(nullable_variant_builtin_.value()))).dump();
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  } else {
    os << "\"nullableVariantBuiltin\":" << "null";
  }
  if (optional_variant_builtin_.has_value()) {
    MaybeAddComma(os, needs_comma);
    switch (optional_variant_builtin_.value().index()) {
      case 0: {
        os << "\"optionalVariantBuiltin\":" << (nlohmann::json(std::get<0>(optional_variant_builtin_.value()))).dump();
        break;
      }
      case 1: {
        os << "\"optionalVariantBuiltin\":" << (nlohmann::json(std::get<1>(optional_variant_builtin_.value()))).dump();
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
  MaybeAddComma(os, needs_comma);
  switch (simple_variant_class_.index()) {
    case 0: {
      os << "\"simpleVariantClass\":";
      std::get<0>(simple_variant_class_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"simpleVariantClass\":";
      std::get<1>(simple_variant_class_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  if (nullable_variant_class_.has_value()) {
    switch (nullable_variant_class_.value().index()) {
      case 0: {
        os << "\"nullableVariantClass\":";
        std::get<0>(nullable_variant_class_.value())->Serialize(os);
        break;
      }
      case 1: {
        os << "\"nullableVariantClass\":";
        std::get<1>(nullable_variant_class_.value())->Serialize(os);
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  } else {
    os << "\"nullableVariantClass\":" << "null";
  }
  if (optional_variant_class_.has_value()) {
    MaybeAddComma(os, needs_comma);
    switch (optional_variant_class_.value().index()) {
      case 0: {
        os << "\"optionalVariantClass\":";
        std::get<0>(optional_variant_class_.value())->Serialize(os);
        break;
      }
      case 1: {
        os << "\"optionalVariantClass\":";
        std::get<1>(optional_variant_class_.value())->Serialize(os);
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

void VNode::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    VNode::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
