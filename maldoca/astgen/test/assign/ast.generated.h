// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_ASSIGN_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_ASSIGN_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class AExpressionType {
  kIdentifier,
  kAssignment,
};

absl::string_view AExpressionTypeToString(AExpressionType expression_type);
absl::StatusOr<AExpressionType> StringToAExpressionType(absl::string_view s);

class AExpression {
 public:
  virtual ~AExpression() = default;

  virtual AExpressionType expression_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<AExpression>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class AIdentifier : public virtual AExpression {
 public:
  explicit AIdentifier(
      std::string name);

  AExpressionType expression_type() const override {
    return AExpressionType::kIdentifier;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<AIdentifier>> FromJson(const nlohmann::json& json);

  absl::string_view name() const;
  void set_name(std::string name);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetName(const nlohmann::json& json);

 private:
  std::string name_;
};

class AAssignment : public virtual AExpression {
 public:
  explicit AAssignment(
      std::unique_ptr<AIdentifier> lhs,
      std::unique_ptr<AExpression> rhs);

  AExpressionType expression_type() const override {
    return AExpressionType::kAssignment;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<AAssignment>> FromJson(const nlohmann::json& json);

  AIdentifier* lhs();
  const AIdentifier* lhs() const;
  void set_lhs(std::unique_ptr<AIdentifier> lhs);

  AExpression* rhs();
  const AExpression* rhs() const;
  void set_rhs(std::unique_ptr<AExpression> rhs);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<AIdentifier>> GetLhs(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<AExpression>> GetRhs(const nlohmann::json& json);

 private:
  std::unique_ptr<AIdentifier> lhs_;
  std::unique_ptr<AExpression> rhs_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_ASSIGN_AST_GENERATED_H_
