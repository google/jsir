// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#include "maldoca/astgen/test/assign/ast.generated.h"

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "absl/container/flat_hash_map.h"
#include "absl/memory/memory.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

// =============================================================================
// AExpression
// =============================================================================

absl::string_view AExpressionTypeToString(AExpressionType expression_type) {
  switch (expression_type) {
    case AExpressionType::kIdentifier:
      return "Identifier";
    case AExpressionType::kAssignment:
      return "Assignment";
  }
}

absl::StatusOr<AExpressionType> StringToAExpressionType(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, AExpressionType> {
      {"Identifier", AExpressionType::kIdentifier},
      {"Assignment", AExpressionType::kAssignment},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for AExpressionType: ", s));
  }
  return it->second;
}

// =============================================================================
// AIdentifier
// =============================================================================

AIdentifier::AIdentifier(
    std::string name)
    : AExpression(),
      name_(std::move(name)) {}

absl::string_view AIdentifier::name() const {
  return name_;
}

void AIdentifier::set_name(std::string name) {
  name_ = std::move(name);
}

// =============================================================================
// AAssignment
// =============================================================================

AAssignment::AAssignment(
    std::unique_ptr<AIdentifier> lhs,
    std::unique_ptr<AExpression> rhs)
    : AExpression(),
      lhs_(std::move(lhs)),
      rhs_(std::move(rhs)) {}

AIdentifier* AAssignment::lhs() {
  return lhs_.get();
}

const AIdentifier* AAssignment::lhs() const {
  return lhs_.get();
}

void AAssignment::set_lhs(std::unique_ptr<AIdentifier> lhs) {
  lhs_ = std::move(lhs);
}

AExpression* AAssignment::rhs() {
  return rhs_.get();
}

const AExpression* AAssignment::rhs() const {
  return rhs_.get();
}

void AAssignment::set_rhs(std::unique_ptr<AExpression> rhs) {
  rhs_ = std::move(rhs);
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
