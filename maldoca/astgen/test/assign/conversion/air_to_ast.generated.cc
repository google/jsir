// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/assign/conversion/air_to_ast.h"

#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "llvm/ADT/TypeSwitch.h"
#include "llvm/Support/Casting.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/base/status_macros.h"
#include "maldoca/astgen/test/assign/ast.generated.h"
#include "maldoca/astgen/test/assign/ir.h"

namespace maldoca {

absl::StatusOr<std::unique_ptr<AExpression>>
AirToAst::VisitExpression(AirExpressionOpInterface op) {
  using Ret = absl::StatusOr<std::unique_ptr<AExpression>>;
  return llvm::TypeSwitch<mlir::Operation*, Ret>(op)
    .Case([&](AirIdentifierOp op) {
      return VisitIdentifier(op);
    })
    .Case([&](AirAssignmentOp op) {
      return VisitAssignment(op);
    })
    .Default([&](mlir::Operation* op) {
      return absl::InvalidArgumentError("Unrecognized op");
    });
}

absl::StatusOr<std::unique_ptr<AIdentifier>>
AirToAst::VisitIdentifier(AirIdentifierOp op) {
  std::string name = op.getNameAttr().str();
  return Create<AIdentifier>(
      op,
      std::move(name));
}

absl::StatusOr<std::unique_ptr<AIdentifier>>
AirToAst::VisitIdentifierRef(AirIdentifierRefOp op) {
  std::string name = op.getNameAttr().str();
  return Create<AIdentifier>(
      op,
      std::move(name));
}

absl::StatusOr<std::unique_ptr<AAssignment>>
AirToAst::VisitAssignment(AirAssignmentOp op) {
  auto lhs_op = llvm::dyn_cast<AirIdentifierRefOp>(op.getLhs().getDefiningOp());
  if (lhs_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected AirIdentifierRefOp, got ",
                     op.getLhs().getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<AIdentifier> lhs, VisitIdentifierRef(lhs_op));
  auto rhs_op = llvm::dyn_cast<AirExpressionOpInterface>(op.getRhs().getDefiningOp());
  if (rhs_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected AirExpressionOpInterface, got ",
                     op.getRhs().getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<AExpression> rhs, VisitExpression(rhs_op));
  return Create<AAssignment>(
      op,
      std::move(lhs),
      std::move(rhs));
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
