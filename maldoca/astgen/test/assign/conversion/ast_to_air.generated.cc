// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/assign/conversion/ast_to_air.h"

#include <memory>
#include <utility>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/astgen/test/assign/ast.generated.h"
#include "maldoca/astgen/test/assign/ir.h"

namespace maldoca {

AirExpressionOpInterface AstToAir::VisitExpression(const AExpression *node) {
  if (auto *identifier = dynamic_cast<const AIdentifier *>(node)) {
    return VisitIdentifier(identifier);
  }
  if (auto *assignment = dynamic_cast<const AAssignment *>(node)) {
    return VisitAssignment(assignment);
  }
  LOG(FATAL) << "Unreachable code.";
}

AirIdentifierOp AstToAir::VisitIdentifier(const AIdentifier *node) {
  mlir::StringAttr mlir_name = builder_.getStringAttr(node->name());
  return CreateExpr<AirIdentifierOp>(node, mlir_name);
}

AirIdentifierRefOp AstToAir::VisitIdentifierRef(const AIdentifier *node) {
  mlir::StringAttr mlir_name = builder_.getStringAttr(node->name());
  return CreateExpr<AirIdentifierRefOp>(node, mlir_name);
}

AirAssignmentOp AstToAir::VisitAssignment(const AAssignment *node) {
  mlir::Value mlir_lhs = VisitIdentifierRef(node->lhs());
  mlir::Value mlir_rhs = VisitExpression(node->rhs());
  return CreateExpr<AirAssignmentOp>(node, mlir_lhs, mlir_rhs);
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
