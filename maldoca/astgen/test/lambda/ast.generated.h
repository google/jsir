// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_LAMBDA_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_LAMBDA_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class LaExpressionType {
  kVariable,
  kFunctionDefinition,
  kFunctionCall,
};

absl::string_view LaExpressionTypeToString(LaExpressionType expression_type);
absl::StatusOr<LaExpressionType> StringToLaExpressionType(absl::string_view s);

class LaExpression {
 public:
  virtual ~LaExpression() = default;

  virtual LaExpressionType expression_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<LaExpression>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class LaVariable : public virtual LaExpression {
 public:
  explicit LaVariable(
      std::string identifier);

  LaExpressionType expression_type() const override {
    return LaExpressionType::kVariable;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<LaVariable>> FromJson(const nlohmann::json& json);

  absl::string_view identifier() const;
  void set_identifier(std::string identifier);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetIdentifier(const nlohmann::json& json);

 private:
  std::string identifier_;
};

class LaFunctionDefinition : public virtual LaExpression {
 public:
  explicit LaFunctionDefinition(
      std::unique_ptr<LaVariable> parameter,
      std::unique_ptr<LaExpression> body);

  LaExpressionType expression_type() const override {
    return LaExpressionType::kFunctionDefinition;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<LaFunctionDefinition>> FromJson(const nlohmann::json& json);

  LaVariable* parameter();
  const LaVariable* parameter() const;
  void set_parameter(std::unique_ptr<LaVariable> parameter);

  LaExpression* body();
  const LaExpression* body() const;
  void set_body(std::unique_ptr<LaExpression> body);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<LaVariable>> GetParameter(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<LaExpression>> GetBody(const nlohmann::json& json);

 private:
  std::unique_ptr<LaVariable> parameter_;
  std::unique_ptr<LaExpression> body_;
};

class LaFunctionCall : public virtual LaExpression {
 public:
  explicit LaFunctionCall(
      std::unique_ptr<LaExpression> function,
      std::unique_ptr<LaExpression> argument);

  LaExpressionType expression_type() const override {
    return LaExpressionType::kFunctionCall;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<LaFunctionCall>> FromJson(const nlohmann::json& json);

  LaExpression* function();
  const LaExpression* function() const;
  void set_function(std::unique_ptr<LaExpression> function);

  LaExpression* argument();
  const LaExpression* argument() const;
  void set_argument(std::unique_ptr<LaExpression> argument);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<LaExpression>> GetFunction(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<LaExpression>> GetArgument(const nlohmann::json& json);

 private:
  std::unique_ptr<LaExpression> function_;
  std::unique_ptr<LaExpression> argument_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_LAMBDA_AST_GENERATED_H_
