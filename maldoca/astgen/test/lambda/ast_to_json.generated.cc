// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cmath>
#include <limits>
#include <ostream>
#include <string>
#include <utility>

#include "maldoca/astgen/test/lambda/ast.generated.h"
#include "absl/log/log.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

void MaybeAddComma(std::ostream &os, bool &needs_comma) {
  if (needs_comma) {
    os << ",";
  }
  needs_comma = true;
}

// =============================================================================
// LaExpression
// =============================================================================

void LaExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// LaVariable
// =============================================================================

void LaVariable::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"identifier\":" << (nlohmann::json(identifier_)).dump();
}

void LaVariable::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Variable\"";
    LaExpression::SerializeFields(os, needs_comma);
    LaVariable::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LaFunctionDefinition
// =============================================================================

void LaFunctionDefinition::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"parameter\":";
  parameter_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void LaFunctionDefinition::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"FunctionDefinition\"";
    LaExpression::SerializeFields(os, needs_comma);
    LaFunctionDefinition::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// LaFunctionCall
// =============================================================================

void LaFunctionCall::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"function\":";
  function_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
}

void LaFunctionCall::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"FunctionCall\"";
    LaExpression::SerializeFields(os, needs_comma);
    LaFunctionCall::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
