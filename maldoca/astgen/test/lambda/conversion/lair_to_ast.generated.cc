// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/lambda/conversion/lair_to_ast.h"

#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "llvm/ADT/TypeSwitch.h"
#include "llvm/Support/Casting.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/base/status_macros.h"
#include "maldoca/astgen/test/lambda/ast.generated.h"
#include "maldoca/astgen/test/lambda/ir.h"

namespace maldoca {

absl::StatusOr<std::unique_ptr<LaExpression>>
LairToAst::VisitExpression(LairExpressionOpInterface op) {
  using Ret = absl::StatusOr<std::unique_ptr<LaExpression>>;
  return llvm::TypeSwitch<mlir::Operation*, Ret>(op)
    .Case([&](LairVariableOp op) {
      return VisitVariable(op);
    })
    .Case([&](LairFunctionDefinitionOp op) {
      return VisitFunctionDefinition(op);
    })
    .Case([&](LairFunctionCallOp op) {
      return VisitFunctionCall(op);
    })
    .Default([&](mlir::Operation* op) {
      return absl::InvalidArgumentError("Unrecognized op");
    });
}

absl::StatusOr<std::unique_ptr<LaVariable>>
LairToAst::VisitVariable(LairVariableOp op) {
  std::string identifier = op.getIdentifierAttr().str();
  return Create<LaVariable>(
      op,
      std::move(identifier));
}

absl::StatusOr<std::unique_ptr<LaVariable>>
LairToAst::VisitVariableRef(LairVariableRefOp op) {
  std::string identifier = op.getIdentifierAttr().str();
  return Create<LaVariable>(
      op,
      std::move(identifier));
}

absl::StatusOr<std::unique_ptr<LaFunctionDefinition>>
LairToAst::VisitFunctionDefinition(LairFunctionDefinitionOp op) {
  MALDOCA_ASSIGN_OR_RETURN(auto mlir_parameter_value, GetExprRegionValue(op.getParameter()));
  auto parameter_op = llvm::dyn_cast<LairVariableRefOp>(mlir_parameter_value.getDefiningOp());
  if (parameter_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected LairVariableRefOp, got ",
                     mlir_parameter_value.getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<LaVariable> parameter, VisitVariableRef(parameter_op));
  MALDOCA_ASSIGN_OR_RETURN(auto mlir_body_value, GetExprRegionValue(op.getBody()));
  auto body_op = llvm::dyn_cast<LairExpressionOpInterface>(mlir_body_value.getDefiningOp());
  if (body_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected LairExpressionOpInterface, got ",
                     mlir_body_value.getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<LaExpression> body, VisitExpression(body_op));
  return Create<LaFunctionDefinition>(
      op,
      std::move(parameter),
      std::move(body));
}

absl::StatusOr<std::unique_ptr<LaFunctionCall>>
LairToAst::VisitFunctionCall(LairFunctionCallOp op) {
  auto function_op = llvm::dyn_cast<LairExpressionOpInterface>(op.getFunction().getDefiningOp());
  if (function_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected LairExpressionOpInterface, got ",
                     op.getFunction().getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<LaExpression> function, VisitExpression(function_op));
  auto argument_op = llvm::dyn_cast<LairExpressionOpInterface>(op.getArgument().getDefiningOp());
  if (argument_op == nullptr) {
    return absl::InvalidArgumentError(
        absl::StrCat("Expected LairExpressionOpInterface, got ",
                     op.getArgument().getDefiningOp()->getName().getStringRef().str(), "."));
  }
  MALDOCA_ASSIGN_OR_RETURN(std::unique_ptr<LaExpression> argument, VisitExpression(argument_op));
  return Create<LaFunctionCall>(
      op,
      std::move(function),
      std::move(argument));
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
