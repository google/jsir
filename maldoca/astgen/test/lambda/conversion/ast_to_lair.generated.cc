// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include "maldoca/astgen/test/lambda/conversion/ast_to_lair.h"

#include <memory>
#include <utility>
#include <vector>

#include "llvm/ADT/APFloat.h"
#include "mlir/IR/Attributes.h"
#include "mlir/IR/Block.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/Operation.h"
#include "mlir/IR/Region.h"
#include "mlir/IR/Value.h"
#include "absl/cleanup/cleanup.h"
#include "absl/log/check.h"
#include "absl/log/log.h"
#include "absl/types/optional.h"
#include "absl/types/variant.h"
#include "maldoca/astgen/test/lambda/ast.generated.h"
#include "maldoca/astgen/test/lambda/ir.h"

namespace maldoca {

LairExpressionOpInterface AstToLair::VisitExpression(const LaExpression *node) {
  if (auto *variable = dynamic_cast<const LaVariable *>(node)) {
    return VisitVariable(variable);
  }
  if (auto *function_definition = dynamic_cast<const LaFunctionDefinition *>(node)) {
    return VisitFunctionDefinition(function_definition);
  }
  if (auto *function_call = dynamic_cast<const LaFunctionCall *>(node)) {
    return VisitFunctionCall(function_call);
  }
  LOG(FATAL) << "Unreachable code.";
}

LairVariableOp AstToLair::VisitVariable(const LaVariable *node) {
  mlir::StringAttr mlir_identifier = builder_.getStringAttr(node->identifier());
  return CreateExpr<LairVariableOp>(node, mlir_identifier);
}

LairVariableRefOp AstToLair::VisitVariableRef(const LaVariable *node) {
  mlir::StringAttr mlir_identifier = builder_.getStringAttr(node->identifier());
  return CreateExpr<LairVariableRefOp>(node, mlir_identifier);
}

LairFunctionDefinitionOp AstToLair::VisitFunctionDefinition(const LaFunctionDefinition *node) {
  auto op = CreateExpr<LairFunctionDefinitionOp>(node);
  mlir::Region &mlir_parameter_region = op.getParameter();
  AppendNewBlockAndPopulate(mlir_parameter_region, [&] {
    mlir::Value mlir_parameter = VisitVariableRef(node->parameter());
    CreateStmt<LairExprRegionEndOp>(node, mlir_parameter);
  });
  mlir::Region &mlir_body_region = op.getBody();
  AppendNewBlockAndPopulate(mlir_body_region, [&] {
    mlir::Value mlir_body = VisitExpression(node->body());
    CreateStmt<LairExprRegionEndOp>(node, mlir_body);
  });
  return op;
}

LairFunctionCallOp AstToLair::VisitFunctionCall(const LaFunctionCall *node) {
  mlir::Value mlir_function = VisitExpression(node->function());
  mlir::Value mlir_argument = VisitExpression(node->argument());
  return CreateExpr<LairFunctionCallOp>(node, mlir_function, mlir_argument);
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
