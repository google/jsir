// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// NOLINTBEGIN(whitespace/line_length)
// clang-format off
// IWYU pragma: begin_keep

#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "maldoca/astgen/test/union/ast.generated.h"
#include "absl/container/flat_hash_set.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/string_view.h"
#include "maldoca/base/status_macros.h"
#include "nlohmann/json.hpp"

namespace maldoca {

static absl::StatusOr<std::string> GetType(const nlohmann::json& json) {
  auto type_it = json.find("type");
  if (type_it == json.end()) {
    return absl::InvalidArgumentError("`type` is undefined.");
  }
  const nlohmann::json& json_type = type_it.value();
  if (json_type.is_null()) {
    return absl::InvalidArgumentError("json_type is null.");
  }
  if (!json_type.is_string()) {
    return absl::InvalidArgumentError("`json_type` expected to be string.");
  }
  return json_type.get<std::string>();
}

// =============================================================================
// EUnionType
// =============================================================================

absl::StatusOr<std::unique_ptr<EUnionType>>
EUnionType::FromJson(const nlohmann::json& json) {
  if (!json.is_object()) {
    return absl::InvalidArgumentError("JSON is not an object.");
  }

  MALDOCA_ASSIGN_OR_RETURN(std::string type, GetType(json));

  if (type == "SubNodeA") {
    return ESubNodeA::FromJson(json);
  } else if (type == "SubNodeB") {
    return ESubNodeB::FromJson(json);
  }
  return absl::InvalidArgumentError(absl::StrCat("Invalid type: ", type));
}

// =============================================================================
// ENode
// =============================================================================

absl::StatusOr<std::string>
ENode::GetName(const nlohmann::json& json) {
  auto name_it = json.find("name");
  if (name_it == json.end()) {
    return absl::InvalidArgumentError("`name` is undefined.");
  }
  const nlohmann::json& json_name = name_it.value();

  if (json_name.is_null()) {
    return absl::InvalidArgumentError("json_name is null.");
  }
  if (!json_name.is_string()) {
    return absl::InvalidArgumentError("Expecting json_name.is_string().");
  }
  return json_name.get<std::string>();
}

absl::StatusOr<std::unique_ptr<EUnionType>>
ENode::GetContent(const nlohmann::json& json) {
  auto content_it = json.find("content");
  if (content_it == json.end()) {
    return absl::InvalidArgumentError("`content` is undefined.");
  }
  const nlohmann::json& json_content = content_it.value();

  if (json_content.is_null()) {
    return absl::InvalidArgumentError("json_content is null.");
  }
  return EUnionType::FromJson(json_content);
}

absl::StatusOr<std::unique_ptr<ENode>>
ENode::FromJson(const nlohmann::json& json) {
  if (!json.is_object()) {
    return absl::InvalidArgumentError("JSON is not an object.");
  }

  MALDOCA_ASSIGN_OR_RETURN(auto name, ENode::GetName(json));
  MALDOCA_ASSIGN_OR_RETURN(auto content, ENode::GetContent(json));

  return absl::make_unique<ENode>(
      std::move(name),
      std::move(content));
}

// =============================================================================
// ESubNodeA
// =============================================================================

absl::StatusOr<std::string>
ESubNodeA::GetValueA(const nlohmann::json& json) {
  auto value_a_it = json.find("valueA");
  if (value_a_it == json.end()) {
    return absl::InvalidArgumentError("`valueA` is undefined.");
  }
  const nlohmann::json& json_value_a = value_a_it.value();

  if (json_value_a.is_null()) {
    return absl::InvalidArgumentError("json_value_a is null.");
  }
  if (!json_value_a.is_string()) {
    return absl::InvalidArgumentError("Expecting json_value_a.is_string().");
  }
  return json_value_a.get<std::string>();
}

absl::StatusOr<std::unique_ptr<ESubNodeA>>
ESubNodeA::FromJson(const nlohmann::json& json) {
  if (!json.is_object()) {
    return absl::InvalidArgumentError("JSON is not an object.");
  }

  MALDOCA_ASSIGN_OR_RETURN(auto value_a, ESubNodeA::GetValueA(json));

  return absl::make_unique<ESubNodeA>(
      std::move(value_a));
}

// =============================================================================
// ESubNodeB
// =============================================================================

absl::StatusOr<std::string>
ESubNodeB::GetValueB(const nlohmann::json& json) {
  auto value_b_it = json.find("valueB");
  if (value_b_it == json.end()) {
    return absl::InvalidArgumentError("`valueB` is undefined.");
  }
  const nlohmann::json& json_value_b = value_b_it.value();

  if (json_value_b.is_null()) {
    return absl::InvalidArgumentError("json_value_b is null.");
  }
  if (!json_value_b.is_string()) {
    return absl::InvalidArgumentError("Expecting json_value_b.is_string().");
  }
  return json_value_b.get<std::string>();
}

absl::StatusOr<std::unique_ptr<ESubNodeB>>
ESubNodeB::FromJson(const nlohmann::json& json) {
  if (!json.is_object()) {
    return absl::InvalidArgumentError("JSON is not an object.");
  }

  MALDOCA_ASSIGN_OR_RETURN(auto value_b, ESubNodeB::GetValueB(json));

  return absl::make_unique<ESubNodeB>(
      std::move(value_b));
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
