// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_UNION_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_UNION_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

enum class EUnionTypeType {
  kSubNodeA,
  kSubNodeB,
};

absl::string_view EUnionTypeTypeToString(EUnionTypeType union_type_type);
absl::StatusOr<EUnionTypeType> StringToEUnionTypeType(absl::string_view s);

class EUnionType {
 public:
  virtual ~EUnionType() = default;

  virtual EUnionTypeType union_type_type() const = 0;

  virtual void Serialize(std::ostream& os) const = 0;

  static absl::StatusOr<std::unique_ptr<EUnionType>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class ENode {
 public:
  explicit ENode(
      std::string name,
      std::unique_ptr<EUnionType> content);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<ENode>> FromJson(const nlohmann::json& json);

  absl::string_view name() const;
  void set_name(std::string name);

  EUnionType* content();
  const EUnionType* content() const;
  void set_content(std::unique_ptr<EUnionType> content);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetName(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<EUnionType>> GetContent(const nlohmann::json& json);

 private:
  std::string name_;
  std::unique_ptr<EUnionType> content_;
};

class ESubNodeA : public virtual EUnionType {
 public:
  explicit ESubNodeA(
      std::string value_a);

  EUnionTypeType union_type_type() const override {
    return EUnionTypeType::kSubNodeA;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<ESubNodeA>> FromJson(const nlohmann::json& json);

  absl::string_view value_a() const;
  void set_value_a(std::string value_a);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetValueA(const nlohmann::json& json);

 private:
  std::string value_a_;
};

class ESubNodeB : public virtual EUnionType {
 public:
  explicit ESubNodeB(
      std::string value_b);

  EUnionTypeType union_type_type() const override {
    return EUnionTypeType::kSubNodeB;
  }

  void Serialize(std::ostream& os) const override;

  static absl::StatusOr<std::unique_ptr<ESubNodeB>> FromJson(const nlohmann::json& json);

  absl::string_view value_b() const;
  void set_value_b(std::string value_b);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::string> GetValueB(const nlohmann::json& json);

 private:
  std::string value_b_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_UNION_AST_GENERATED_H_
