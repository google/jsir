// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#ifndef MALDOCA_ASTGEN_TEST_REGION_AST_GENERATED_H_
#define MALDOCA_ASTGEN_TEST_REGION_AST_GENERATED_H_

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <optional>
#include <string>
#include <variant>
#include <vector>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"

namespace maldoca {

class RExpr {
 public:
  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<RExpr>> FromJson(const nlohmann::json& json);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;
};

class RStmt {
 public:
  explicit RStmt(
      std::unique_ptr<RExpr> expr);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<RStmt>> FromJson(const nlohmann::json& json);

  RExpr* expr();
  const RExpr* expr() const;
  void set_expr(std::unique_ptr<RExpr> expr);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<RExpr>> GetExpr(const nlohmann::json& json);

 private:
  std::unique_ptr<RExpr> expr_;
};

class RNode {
 public:
  explicit RNode(
      std::unique_ptr<RExpr> expr,
      std::optional<std::unique_ptr<RExpr>> optional_expr,
      std::vector<std::unique_ptr<RExpr>> exprs,
      std::unique_ptr<RStmt> stmt,
      std::optional<std::unique_ptr<RStmt>> optional_stmt,
      std::vector<std::unique_ptr<RStmt>> stmts);

  void Serialize(std::ostream& os) const;

  static absl::StatusOr<std::unique_ptr<RNode>> FromJson(const nlohmann::json& json);

  RExpr* expr();
  const RExpr* expr() const;
  void set_expr(std::unique_ptr<RExpr> expr);

  std::optional<RExpr*> optional_expr();
  std::optional<const RExpr*> optional_expr() const;
  void set_optional_expr(std::optional<std::unique_ptr<RExpr>> optional_expr);

  std::vector<std::unique_ptr<RExpr>>* exprs();
  const std::vector<std::unique_ptr<RExpr>>* exprs() const;
  void set_exprs(std::vector<std::unique_ptr<RExpr>> exprs);

  RStmt* stmt();
  const RStmt* stmt() const;
  void set_stmt(std::unique_ptr<RStmt> stmt);

  std::optional<RStmt*> optional_stmt();
  std::optional<const RStmt*> optional_stmt() const;
  void set_optional_stmt(std::optional<std::unique_ptr<RStmt>> optional_stmt);

  std::vector<std::unique_ptr<RStmt>>* stmts();
  const std::vector<std::unique_ptr<RStmt>>* stmts() const;
  void set_stmts(std::vector<std::unique_ptr<RStmt>> stmts);

 protected:
  // Internal function used by Serialize().
  // Sets the fields defined in this class.
  // Does not set fields defined in ancestors.
  void SerializeFields(std::ostream& os, bool &needs_comma) const;

  // Internal functions used by FromJson().
  // Extracts a field from a JSON object.
  static absl::StatusOr<std::unique_ptr<RExpr>> GetExpr(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::unique_ptr<RExpr>>> GetOptionalExpr(const nlohmann::json& json);
  static absl::StatusOr<std::vector<std::unique_ptr<RExpr>>> GetExprs(const nlohmann::json& json);
  static absl::StatusOr<std::unique_ptr<RStmt>> GetStmt(const nlohmann::json& json);
  static absl::StatusOr<std::optional<std::unique_ptr<RStmt>>> GetOptionalStmt(const nlohmann::json& json);
  static absl::StatusOr<std::vector<std::unique_ptr<RStmt>>> GetStmts(const nlohmann::json& json);

 private:
  std::unique_ptr<RExpr> expr_;
  std::optional<std::unique_ptr<RExpr>> optional_expr_;
  std::vector<std::unique_ptr<RExpr>> exprs_;
  std::unique_ptr<RStmt> stmt_;
  std::optional<std::unique_ptr<RStmt>> optional_stmt_;
  std::vector<std::unique_ptr<RStmt>> stmts_;
};

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca

#endif  // MALDOCA_ASTGEN_TEST_REGION_AST_GENERATED_H_
