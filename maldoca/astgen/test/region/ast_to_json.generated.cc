// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cmath>
#include <limits>
#include <ostream>
#include <string>
#include <utility>

#include "maldoca/astgen/test/region/ast.generated.h"
#include "absl/log/log.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

void MaybeAddComma(std::ostream &os, bool &needs_comma) {
  if (needs_comma) {
    os << ",";
  }
  needs_comma = true;
}

// =============================================================================
// RExpr
// =============================================================================

void RExpr::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void RExpr::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    RExpr::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// RStmt
// =============================================================================

void RStmt::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"expr\":";
  expr_->Serialize(os);
}

void RStmt::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    RStmt::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// RNode
// =============================================================================

void RNode::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"expr\":";
  expr_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (optional_expr_.has_value()) {
    os << "\"optionalExpr\":";
    optional_expr_.value()->Serialize(os);
  } else {
    os << "\"optionalExpr\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"exprs\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : exprs_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"stmt\":";
  stmt_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (optional_stmt_.has_value()) {
    os << "\"optionalStmt\":";
    optional_stmt_.value()->Serialize(os);
  } else {
    os << "\"optionalStmt\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"stmts\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : stmts_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void RNode::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    RNode::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
