"""Generates test files for the conversion tests.

In each directory, only `input.js` is manually written. The other files are
generated by running this tool.

Usage: python3 generate_tests.py
"""

import os
import shutil
import subprocess
import sys


def run_command(cmd: str) -> bytes:
  """Run a shell command and return its output."""

  print("Running:")
  print(" ", cmd)

  try:
    return subprocess.check_output(cmd, shell=True, stderr=subprocess.PIPE)
  except subprocess.CalledProcessError as e:
    print("Error running command, output:", e.output)
    sys.exit(1)


def generate_test_file(name: str, output_name: str, passes: str, prefix: str):
  """Generates a test file.

  Args:
    name: Test case name.
    output_name: The output file will be <name>/<output_name>.
    passes: Comma-separated list of JSIR passes.
    prefix: FileCheck prefix.
  """
  output = run_command(
      "blaze run //third_party/maldoca/js/ir:jsir_gen --"
      f" --input_file {'$(pwd)/' + name + '/input.js'}"
      f" --passes='{passes}'"
  )

  output = output.strip()

  # Prepend prefix
  lines = output.split(b"\n")
  out_lines = []
  for i, line in enumerate(lines):
    if not line:
      line = f"// {prefix}-EMPTY:".encode()
    elif i == 0:
      line = f"// {prefix}:      ".encode() + line
    else:
      line = f"// {prefix}-NEXT: ".encode() + line
    out_lines.append(line)

  output = b"\n".join(out_lines) + b"\n"

  with open(name + "/" + output_name, "wb") as f:
    f.write(output)


if __name__ == "__main__":
  for entry in os.listdir(os.path.dirname(__file__)):
    if not os.path.isdir(entry):
      continue

    print("Generating test:", entry)

    generate_test_file(
        entry,
        output_name="ast.json",
        passes="source2ast",
        prefix="AST",
    )

    generate_test_file(
        entry,
        output_name="jshir.mlir",
        passes="source2ast,ast2hir",
        prefix="JSHIR",
    )

    generate_test_file(
        entry,
        output_name="jslir.mlir",
        passes="source2ast,ast2hir,hir2lir",
        prefix="JSLIR",
    )

    generate_test_file(
        entry,
        output_name="output.js",
        passes="source2ast,ast2source",
        prefix="SOURCE",
    )

    shutil.copyfile("run.lit.template", os.path.join(entry, "run.lit"))
    shutil.copyfile("BUILD.template.bzl", os.path.join(entry, "BUILD"))
