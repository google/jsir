// JSLIR:      "jsir.file"() <{comments = []}> ({
// JSLIR-NEXT:   "jsir.program"() <{source_type = "script"}> ({
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %19 = "jsir.identifier_ref"() <{name = "y"}> : () -> !jsir.any
// JSLIR-NEXT:       %20 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "0", 0.000000e+00 : f64>, value = 0.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:       %21 = "jsir.variable_declarator"(%19, %20) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%21) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     %0 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %1 = "jsir.identifier"() <{name = "array"}> : () -> !jsir.any
// JSLIR-NEXT:     %2 = "jslir.for_of_statement_start"(%0, %1) <{await = false, left_declaration = #jsir<for_in_of_declaration   <L 2 C 5>, <L 2 C 10>, 16, 21, 1,   <L 2 C 9>, <L 2 C 10>, 20, 21, 1,  "x", 0, "var">}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb1:  // 2 preds: ^bb0, ^bb2
// JSLIR-NEXT:     %3 = "jslir.for_in_of_statement_has_next"(%2) : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %4 = "builtin.unrealized_conversion_cast"(%3) : (!jsir.any) -> i1
// JSLIR-NEXT:     "cf.cond_br"(%4)[^bb2, ^bb3] <{operandSegmentSizes = array<i32: 1, 0, 0>}> : (i1) -> ()
// JSLIR-NEXT:   ^bb2:  // pred: ^bb1
// JSLIR-NEXT:     "jslir.for_in_of_statement_get_next"(%2) : (!jsir.any) -> ()
// JSLIR-NEXT:     %5 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind BlockStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "jslir.control_flow_marker"(%5) <{kind = #jsir<cf_marker BlockStatementDirectives>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%5) <{kind = #jsir<cf_marker BlockStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %6 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %7 = "jsir.member_expression"(%6) <{literal_property = #jsir<identifier   <L 3 C 10>, <L 3 C 13>, "log", 44, 47, 2, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %8 = "jsir.identifier"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %9 = "jsir.call_expression"(%7, %8) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%9) : (!jsir.any) -> ()
// JSLIR-NEXT:     %10 = "jsir.identifier_ref"() <{name = "y"}> : () -> !jsir.any
// JSLIR-NEXT:     %11 = "jsir.identifier"() <{name = "y"}> : () -> !jsir.any
// JSLIR-NEXT:     %12 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, value = 1.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:     %13 = "jsir.binary_expression"(%11, %12) <{operator_ = "+"}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     %14 = "jsir.assignment_expression"(%10, %13) <{operator_ = "="}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%14) : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%5) <{kind = #jsir<cf_marker BlockStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb3:  // pred: ^bb1
// JSLIR-NEXT:     "jslir.for_in_of_statement_end"(%2) : (!jsir.any) -> ()
// JSLIR-NEXT:     %15 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %16 = "jsir.member_expression"(%15) <{literal_property = #jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 75, 78, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %17 = "jsir.identifier"() <{name = "y"}> : () -> !jsir.any
// JSLIR-NEXT:     %18 = "jsir.call_expression"(%16, %17) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%18) : (!jsir.any) -> ()
// JSLIR-NEXT:   }, {
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:   }) : () -> ()
// JSLIR-NEXT: }) : () -> ()
// JSLIR-NEXT: jsir.file {[]} ({
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:       // <executable>
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT:     jsir.program {"script"} ({
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %19 = jsir.identifier_ref {"y"}
// JSLIR-NEXT:               // %19 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %20 = jsir.numeric_literal {#jsir<numeric_literal_extra "0", 0.000000e+00 : f64>, 0.000000e+00 : f64}
// JSLIR-NEXT:               // %20 = 0.000000e+00 : f64
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %21 = jsir.variable_declarator (%19, %20)
// JSLIR-NEXT:               // %21 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:             jsir.exprs_region_end (%21)
// JSLIR-NEXT:               // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:         %0 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:           // %0 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:         %1 = jsir.identifier {"array"}
// JSLIR-NEXT:           // %1 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:         %2 = jslir.for_of_statement_start (%0, %1) {false, #jsir<for_in_of_declaration   <L 2 C 5>, <L 2 C 10>, 16, 21, 1,   <L 2 C 9>, <L 2 C 10>, 20, 21, 1,  "x", 0, "var">}
// JSLIR-NEXT:           // %2 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <y#0 : 0.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb1:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %3 = jslir.for_in_of_statement_has_next (%2)
// JSLIR-NEXT:           // %3 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %4 = builtin.unrealized_conversion_cast (%3)
// JSLIR-NEXT:           // %4 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         cf.cond_br (%4) {array<i32: 1, 0, 0>}
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:       ^bb2:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jslir.for_in_of_statement_get_next (%2)
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %5 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// JSLIR-NEXT:           // %5 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%5) {#jsir<cf_marker BlockStatementDirectives>}
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%5) {#jsir<cf_marker BlockStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %6 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %6 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %7 = jsir.member_expression (%6) {#jsir<identifier   <L 3 C 10>, <L 3 C 13>, "log", 44, 47, 2, "log">}
// JSLIR-NEXT:           // %7 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %8 = jsir.identifier {"x"}
// JSLIR-NEXT:           // %8 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %9 = jsir.call_expression (%7, %8)
// JSLIR-NEXT:           // %9 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.expression_statement (%9)
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %10 = jsir.identifier_ref {"y"}
// JSLIR-NEXT:           // %10 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %11 = jsir.identifier {"y"}
// JSLIR-NEXT:           // %11 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %12 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// JSLIR-NEXT:           // %12 = 1.000000e+00 : f64
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %13 = jsir.binary_expression (%11, %12) {"+"}
// JSLIR-NEXT:           // %13 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %14 = jsir.assignment_expression (%10, %13) {"="}
// JSLIR-NEXT:           // %14 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.expression_statement (%14)
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%5) {#jsir<cf_marker BlockStatementEnd>}
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:       ^bb3:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jslir.for_in_of_statement_end (%2)
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %15 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %15 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %16 = jsir.member_expression (%15) {#jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 75, 78, 0, "log">}
// JSLIR-NEXT:           // %16 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %17 = jsir.identifier {"y"}
// JSLIR-NEXT:           // %17 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         %18 = jsir.call_expression (%16, %17)
// JSLIR-NEXT:           // %18 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.expression_statement (%18)
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:     }, {
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:     })
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT: })
// JSLIR-NEXT:   // State [default = <uninitialized>] { }
