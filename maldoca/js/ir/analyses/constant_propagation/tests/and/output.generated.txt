// JSLIR:      "jsir.file"() <{comments = []}> ({
// JSLIR-NEXT:   "jsir.program"() <{source_type = "script"}> ({
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %37 = "jsir.identifier_ref"() <{name = "a"}> : () -> !jsir.any
// JSLIR-NEXT:       %38 = "jsir.boolean_literal"() <{value = false}> : () -> !jsir.any
// JSLIR-NEXT:       %39 = "jslir.logical_expression_start"(%38) <{operator_ = "&&"}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:       %40 = "builtin.unrealized_conversion_cast"(%38) : (!jsir.any) -> i1
// JSLIR-NEXT:       "cf.cond_br"(%40, %38)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 1>}> : (i1, !jsir.any) -> ()
// JSLIR-NEXT:     ^bb1:  // pred: ^bb0
// JSLIR-NEXT:       "jslir.control_flow_marker"(%39) <{kind = #jsir<cf_marker LogicalExpressionRight>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %41 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:       "cf.br"(%41)[^bb2] : (!jsir.any) -> ()
// JSLIR-NEXT:     ^bb2(%42: !jsir.any):  // 2 preds: ^bb0, ^bb1
// JSLIR-NEXT:       "jslir.control_flow_marker"(%39) <{kind = #jsir<cf_marker LogicalExpressionEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %43 = "jsir.variable_declarator"(%37, %42) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%43) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %30 = "jsir.identifier_ref"() <{name = "b"}> : () -> !jsir.any
// JSLIR-NEXT:       %31 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:       %32 = "jslir.logical_expression_start"(%31) <{operator_ = "&&"}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:       %33 = "builtin.unrealized_conversion_cast"(%31) : (!jsir.any) -> i1
// JSLIR-NEXT:       "cf.cond_br"(%33, %31)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 1>}> : (i1, !jsir.any) -> ()
// JSLIR-NEXT:     ^bb1:  // pred: ^bb0
// JSLIR-NEXT:       "jslir.control_flow_marker"(%32) <{kind = #jsir<cf_marker LogicalExpressionRight>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %34 = "jsir.boolean_literal"() <{value = false}> : () -> !jsir.any
// JSLIR-NEXT:       "cf.br"(%34)[^bb2] : (!jsir.any) -> ()
// JSLIR-NEXT:     ^bb2(%35: !jsir.any):  // 2 preds: ^bb0, ^bb1
// JSLIR-NEXT:       "jslir.control_flow_marker"(%32) <{kind = #jsir<cf_marker LogicalExpressionEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %36 = "jsir.variable_declarator"(%30, %35) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%36) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %23 = "jsir.identifier_ref"() <{name = "c"}> : () -> !jsir.any
// JSLIR-NEXT:       %24 = "jsir.identifier"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:       %25 = "jslir.logical_expression_start"(%24) <{operator_ = "&&"}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:       %26 = "builtin.unrealized_conversion_cast"(%24) : (!jsir.any) -> i1
// JSLIR-NEXT:       "cf.cond_br"(%26, %24)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 1>}> : (i1, !jsir.any) -> ()
// JSLIR-NEXT:     ^bb1:  // pred: ^bb0
// JSLIR-NEXT:       "jslir.control_flow_marker"(%25) <{kind = #jsir<cf_marker LogicalExpressionRight>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %27 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:       "cf.br"(%27)[^bb2] : (!jsir.any) -> ()
// JSLIR-NEXT:     ^bb2(%28: !jsir.any):  // 2 preds: ^bb0, ^bb1
// JSLIR-NEXT:       "jslir.control_flow_marker"(%25) <{kind = #jsir<cf_marker LogicalExpressionEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %29 = "jsir.variable_declarator"(%23, %28) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%29) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %16 = "jsir.identifier_ref"() <{name = "d"}> : () -> !jsir.any
// JSLIR-NEXT:       %17 = "jsir.identifier"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:       %18 = "jslir.logical_expression_start"(%17) <{operator_ = "&&"}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:       %19 = "builtin.unrealized_conversion_cast"(%17) : (!jsir.any) -> i1
// JSLIR-NEXT:       "cf.cond_br"(%19, %17)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 1>}> : (i1, !jsir.any) -> ()
// JSLIR-NEXT:     ^bb1:  // pred: ^bb0
// JSLIR-NEXT:       "jslir.control_flow_marker"(%18) <{kind = #jsir<cf_marker LogicalExpressionRight>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %20 = "jsir.boolean_literal"() <{value = false}> : () -> !jsir.any
// JSLIR-NEXT:       "cf.br"(%20)[^bb2] : (!jsir.any) -> ()
// JSLIR-NEXT:     ^bb2(%21: !jsir.any):  // 2 preds: ^bb0, ^bb1
// JSLIR-NEXT:       "jslir.control_flow_marker"(%18) <{kind = #jsir<cf_marker LogicalExpressionEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:       %22 = "jsir.variable_declarator"(%16, %21) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%22) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     %0 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %1 = "jsir.member_expression"(%0) <{literal_property = #jsir<identifier   <L 5 C 8>, <L 5 C 11>, "log", 93, 96, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %2 = "jsir.identifier"() <{name = "a"}> : () -> !jsir.any
// JSLIR-NEXT:     %3 = "jsir.call_expression"(%1, %2) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%3) : (!jsir.any) -> ()
// JSLIR-NEXT:     %4 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %5 = "jsir.member_expression"(%4) <{literal_property = #jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 109, 112, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %6 = "jsir.identifier"() <{name = "b"}> : () -> !jsir.any
// JSLIR-NEXT:     %7 = "jsir.call_expression"(%5, %6) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%7) : (!jsir.any) -> ()
// JSLIR-NEXT:     %8 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %9 = "jsir.member_expression"(%8) <{literal_property = #jsir<identifier   <L 7 C 8>, <L 7 C 11>, "log", 125, 128, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %10 = "jsir.identifier"() <{name = "c"}> : () -> !jsir.any
// JSLIR-NEXT:     %11 = "jsir.call_expression"(%9, %10) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%11) : (!jsir.any) -> ()
// JSLIR-NEXT:     %12 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %13 = "jsir.member_expression"(%12) <{literal_property = #jsir<identifier   <L 8 C 8>, <L 8 C 11>, "log", 141, 144, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %14 = "jsir.identifier"() <{name = "d"}> : () -> !jsir.any
// JSLIR-NEXT:     %15 = "jsir.call_expression"(%13, %14) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%15) : (!jsir.any) -> ()
// JSLIR-NEXT:   }, {
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:   }) : () -> ()
// JSLIR-NEXT: }) : () -> ()
// JSLIR-NEXT: jsir.file {[]} ({
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:       // <executable>
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT:     jsir.program {"script"} ({
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %37 = jsir.identifier_ref {"a"}
// JSLIR-NEXT:               // %37 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %38 = jsir.boolean_literal {false}
// JSLIR-NEXT:               // %38 = false
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %39 = jslir.logical_expression_start (%38) {"&&"}
// JSLIR-NEXT:               // %39 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %40 = builtin.unrealized_conversion_cast (%38)
// JSLIR-NEXT:               // %40 = false
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             cf.cond_br (%40, %38) {array<i32: 1, 0, 1>}
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:           ^bb1:
// JSLIR-NEXT:               // <not executable>
// JSLIR-NEXT:               // State [default = <uninitialized>] { }
// JSLIR-NEXT:             jslir.control_flow_marker (%39) {#jsir<cf_marker LogicalExpressionRight>}
// JSLIR-NEXT:               // State [default = <uninitialized>] { }
// JSLIR-NEXT:             %41 = jsir.boolean_literal {true}
// JSLIR-NEXT:               // %41 = <uninitialized>
// JSLIR-NEXT:               // State [default = <uninitialized>] { }
// JSLIR-NEXT:             cf.br (%41)
// JSLIR-NEXT:               // State [default = <uninitialized>] { }
// JSLIR-NEXT:           ^bb2:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             jslir.control_flow_marker (%39) {#jsir<cf_marker LogicalExpressionEnd>}
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %43 = jsir.variable_declarator (%37, %42)
// JSLIR-NEXT:               // %43 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             jsir.exprs_region_end (%43)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %30 = jsir.identifier_ref {"b"}
// JSLIR-NEXT:               // %30 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %31 = jsir.boolean_literal {true}
// JSLIR-NEXT:               // %31 = true
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %32 = jslir.logical_expression_start (%31) {"&&"}
// JSLIR-NEXT:               // %32 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %33 = builtin.unrealized_conversion_cast (%31)
// JSLIR-NEXT:               // %33 = true
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             cf.cond_br (%33, %31) {array<i32: 1, 0, 1>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:           ^bb1:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%32) {#jsir<cf_marker LogicalExpressionRight>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %34 = jsir.boolean_literal {false}
// JSLIR-NEXT:               // %34 = false
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             cf.br (%34)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:           ^bb2:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%32) {#jsir<cf_marker LogicalExpressionEnd>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> }
// JSLIR-NEXT:             %36 = jsir.variable_declarator (%30, %35)
// JSLIR-NEXT:               // %36 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jsir.exprs_region_end (%36)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %23 = jsir.identifier_ref {"c"}
// JSLIR-NEXT:               // %23 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %24 = jsir.identifier {"x"}
// JSLIR-NEXT:               // %24 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %25 = jslir.logical_expression_start (%24) {"&&"}
// JSLIR-NEXT:               // %25 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %26 = builtin.unrealized_conversion_cast (%24)
// JSLIR-NEXT:               // %26 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             cf.cond_br (%26, %24) {array<i32: 1, 0, 1>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:           ^bb1:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%25) {#jsir<cf_marker LogicalExpressionRight>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %27 = jsir.boolean_literal {true}
// JSLIR-NEXT:               // %27 = true
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             cf.br (%27)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:           ^bb2:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%25) {#jsir<cf_marker LogicalExpressionEnd>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %29 = jsir.variable_declarator (%23, %28)
// JSLIR-NEXT:               // %29 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jsir.exprs_region_end (%29)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %16 = jsir.identifier_ref {"d"}
// JSLIR-NEXT:               // %16 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %17 = jsir.identifier {"x"}
// JSLIR-NEXT:               // %17 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %18 = jslir.logical_expression_start (%17) {"&&"}
// JSLIR-NEXT:               // %18 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %19 = builtin.unrealized_conversion_cast (%17)
// JSLIR-NEXT:               // %19 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             cf.cond_br (%19, %17) {array<i32: 1, 0, 1>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:           ^bb1:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%18) {#jsir<cf_marker LogicalExpressionRight>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %20 = jsir.boolean_literal {false}
// JSLIR-NEXT:               // %20 = false
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             cf.br (%20)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:           ^bb2:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jslir.control_flow_marker (%18) {#jsir<cf_marker LogicalExpressionEnd>}
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             %22 = jsir.variable_declarator (%16, %21)
// JSLIR-NEXT:               // %22 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:             jsir.exprs_region_end (%22)
// JSLIR-NEXT:               // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %0 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %0 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %1 = jsir.member_expression (%0) {#jsir<identifier   <L 5 C 8>, <L 5 C 11>, "log", 93, 96, 0, "log">}
// JSLIR-NEXT:           // %1 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %2 = jsir.identifier {"a"}
// JSLIR-NEXT:           // %2 = false
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %3 = jsir.call_expression (%1, %2)
// JSLIR-NEXT:           // %3 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.expression_statement (%3)
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %4 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %4 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %5 = jsir.member_expression (%4) {#jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 109, 112, 0, "log">}
// JSLIR-NEXT:           // %5 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %6 = jsir.identifier {"b"}
// JSLIR-NEXT:           // %6 = false
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %7 = jsir.call_expression (%5, %6)
// JSLIR-NEXT:           // %7 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.expression_statement (%7)
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %8 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %8 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %9 = jsir.member_expression (%8) {#jsir<identifier   <L 7 C 8>, <L 7 C 11>, "log", 125, 128, 0, "log">}
// JSLIR-NEXT:           // %9 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %10 = jsir.identifier {"c"}
// JSLIR-NEXT:           // %10 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %11 = jsir.call_expression (%9, %10)
// JSLIR-NEXT:           // %11 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.expression_statement (%11)
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %12 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %12 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %13 = jsir.member_expression (%12) {#jsir<identifier   <L 8 C 8>, <L 8 C 11>, "log", 141, 144, 0, "log">}
// JSLIR-NEXT:           // %13 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %14 = jsir.identifier {"d"}
// JSLIR-NEXT:           // %14 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         %15 = jsir.call_expression (%13, %14)
// JSLIR-NEXT:           // %15 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:         jsir.expression_statement (%15)
// JSLIR-NEXT:           // State [default = <unknown>] { <a#0 : false> <b#0 : false> }
// JSLIR-NEXT:     }, {
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:     })
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT: })
// JSLIR-NEXT:   // State [default = <uninitialized>] { }
