// JSLIR:      "jsir.file"() <{comments = []}> ({
// JSLIR-NEXT:   "jsir.program"() <{source_type = "script"}> ({
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %19 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:       %20 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, value = 1.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:       %21 = "jsir.variable_declarator"(%19, %20) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%21) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     %0 = "jslir.labeled_statement_start"() <{label = #jsir<identifier   <L 2 C 0>, <L 2 C 8>, "my_label", 11, 19, 0, "my_label">}> : () -> !jsir.any
// JSLIR-NEXT:     %1 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind WhileStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb1:  // 2 preds: ^bb0, ^bb6
// JSLIR-NEXT:     "jslir.control_flow_marker"(%1) <{kind = #jsir<cf_marker WhileStatementTest>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %2 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:     %3 = "builtin.unrealized_conversion_cast"(%2) : (!jsir.any) -> i1
// JSLIR-NEXT:     "cf.cond_br"(%3)[^bb2, ^bb7] <{operandSegmentSizes = array<i32: 1, 0, 0>}> : (i1) -> ()
// JSLIR-NEXT:   ^bb2:  // pred: ^bb1
// JSLIR-NEXT:     "jslir.control_flow_marker"(%1) <{kind = #jsir<cf_marker WhileStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %4 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind BlockStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "jslir.control_flow_marker"(%4) <{kind = #jsir<cf_marker BlockStatementDirectives>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%4) <{kind = #jsir<cf_marker BlockStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %5 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %6 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, value = 2.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:     %7 = "jsir.assignment_expression"(%5, %6) <{operator_ = "="}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%7) : (!jsir.any) -> ()
// JSLIR-NEXT:     %8 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind WhileStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "cf.br"()[^bb3] : () -> ()
// JSLIR-NEXT:   ^bb3:  // 2 preds: ^bb2, ^bb5
// JSLIR-NEXT:     "jslir.control_flow_marker"(%8) <{kind = #jsir<cf_marker WhileStatementTest>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %9 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:     %10 = "builtin.unrealized_conversion_cast"(%9) : (!jsir.any) -> i1
// JSLIR-NEXT:     "cf.cond_br"(%10)[^bb4, ^bb6] <{operandSegmentSizes = array<i32: 1, 0, 0>}> : (i1) -> ()
// JSLIR-NEXT:   ^bb4:  // pred: ^bb3
// JSLIR-NEXT:     "jslir.control_flow_marker"(%8) <{kind = #jsir<cf_marker WhileStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %11 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind BlockStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "jslir.control_flow_marker"(%11) <{kind = #jsir<cf_marker BlockStatementDirectives>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%11) <{kind = #jsir<cf_marker BlockStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.break_statement"() <{label = #jsir<identifier   <L 5 C 10>, <L 5 C 18>, "my_label", 72, 80, 4, "my_label">}> : () -> ()
// JSLIR-NEXT:     "cf.br"()[^bb7] : () -> ()
// JSLIR-NEXT:   ^bb5:  // no predecessors
// JSLIR-NEXT:     "jslir.control_flow_marker"(%11) <{kind = #jsir<cf_marker BlockStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "cf.br"()[^bb3] : () -> ()
// JSLIR-NEXT:   ^bb6:  // pred: ^bb3
// JSLIR-NEXT:     "jslir.control_flow_marker"(%8) <{kind = #jsir<cf_marker WhileStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %12 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %13 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "3", 3.000000e+00 : f64>, value = 3.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:     %14 = "jsir.assignment_expression"(%12, %13) <{operator_ = "="}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%14) : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%4) <{kind = #jsir<cf_marker BlockStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb7:  // 2 preds: ^bb1, ^bb4
// JSLIR-NEXT:     "jslir.control_flow_marker"(%1) <{kind = #jsir<cf_marker WhileStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%0) <{kind = #jsir<cf_marker LabeledStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %15 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %16 = "jsir.member_expression"(%15) <{literal_property = #jsir<identifier   <L 9 C 8>, <L 9 C 11>, "log", 105, 108, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %17 = "jsir.identifier"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %18 = "jsir.call_expression"(%16, %17) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%18) : (!jsir.any) -> ()
// JSLIR-NEXT:   }, {
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:   }) : () -> ()
// JSLIR-NEXT: }) : () -> ()
// JSLIR-NEXT: jsir.file {[]} ({
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:       // <executable>
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT:     jsir.program {"script"} ({
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %19 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:               // %19 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %20 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// JSLIR-NEXT:               // %20 = 1.000000e+00 : f64
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %21 = jsir.variable_declarator (%19, %20)
// JSLIR-NEXT:               // %21 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:             jsir.exprs_region_end (%21)
// JSLIR-NEXT:               // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %0 = jslir.labeled_statement_start {#jsir<identifier   <L 2 C 0>, <L 2 C 8>, "my_label", 11, 19, 0, "my_label">}
// JSLIR-NEXT:           // %0 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %1 = jslir.control_flow_starter {#jsir<cf_kind WhileStatement>}
// JSLIR-NEXT:           // %1 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb1:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%1) {#jsir<cf_marker WhileStatementTest>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %2 = jsir.boolean_literal {true}
// JSLIR-NEXT:           // %2 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %3 = builtin.unrealized_conversion_cast (%2)
// JSLIR-NEXT:           // %3 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         cf.cond_br (%3) {array<i32: 1, 0, 0>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb2:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%1) {#jsir<cf_marker WhileStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %4 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// JSLIR-NEXT:           // %4 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%4) {#jsir<cf_marker BlockStatementDirectives>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%4) {#jsir<cf_marker BlockStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %5 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:           // %5 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %6 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// JSLIR-NEXT:           // %6 = 2.000000e+00 : f64
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 1.000000e+00 : f64> }
// JSLIR-NEXT:         %7 = jsir.assignment_expression (%5, %6) {"="}
// JSLIR-NEXT:           // %7 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jsir.expression_statement (%7)
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %8 = jslir.control_flow_starter {#jsir<cf_kind WhileStatement>}
// JSLIR-NEXT:           // %8 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb3:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%8) {#jsir<cf_marker WhileStatementTest>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %9 = jsir.boolean_literal {true}
// JSLIR-NEXT:           // %9 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %10 = builtin.unrealized_conversion_cast (%9)
// JSLIR-NEXT:           // %10 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         cf.cond_br (%10) {array<i32: 1, 0, 0>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb4:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%8) {#jsir<cf_marker WhileStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %11 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// JSLIR-NEXT:           // %11 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%11) {#jsir<cf_marker BlockStatementDirectives>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%11) {#jsir<cf_marker BlockStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.break_statement {#jsir<identifier   <L 5 C 10>, <L 5 C 18>, "my_label", 72, 80, 4, "my_label">}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb5:
// JSLIR-NEXT:           // <not executable>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%11) {#jsir<cf_marker BlockStatementEnd>}
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:       ^bb6:
// JSLIR-NEXT:           // <not executable>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%8) {#jsir<cf_marker WhileStatementEnd>}
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %12 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:           // %12 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %13 = jsir.numeric_literal {#jsir<numeric_literal_extra "3", 3.000000e+00 : f64>, 3.000000e+00 : f64}
// JSLIR-NEXT:           // %13 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %14 = jsir.assignment_expression (%12, %13) {"="}
// JSLIR-NEXT:           // %14 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jsir.expression_statement (%14)
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%4) {#jsir<cf_marker BlockStatementEnd>}
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:       ^bb7:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%1) {#jsir<cf_marker WhileStatementEnd>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%0) {#jsir<cf_marker LabeledStatementEnd>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %15 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %15 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %16 = jsir.member_expression (%15) {#jsir<identifier   <L 9 C 8>, <L 9 C 11>, "log", 105, 108, 0, "log">}
// JSLIR-NEXT:           // %16 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %17 = jsir.identifier {"x"}
// JSLIR-NEXT:           // %17 = 2.000000e+00 : f64
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         %18 = jsir.call_expression (%16, %17)
// JSLIR-NEXT:           // %18 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:         jsir.expression_statement (%18)
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 2.000000e+00 : f64> }
// JSLIR-NEXT:     }, {
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:     })
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT: })
// JSLIR-NEXT:   // State [default = <uninitialized>] { }
