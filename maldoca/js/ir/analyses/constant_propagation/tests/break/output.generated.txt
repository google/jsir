// JSLIR:      "jsir.file"() <{comments = []}> ({
// JSLIR-NEXT:   "jsir.program"() <{source_type = "script"}> ({
// JSLIR-NEXT:     "jsir.variable_declaration"() <{kind = "var"}> ({
// JSLIR-NEXT:       %11 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:       %12 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "3", 3.000000e+00 : f64>, value = 3.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:       %13 = "jsir.variable_declarator"(%11, %12) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:       "jsir.exprs_region_end"(%13) : (!jsir.any) -> ()
// JSLIR-NEXT:     }) : () -> ()
// JSLIR-NEXT:     %0 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind WhileStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb1:  // 2 preds: ^bb0, ^bb3
// JSLIR-NEXT:     "jslir.control_flow_marker"(%0) <{kind = #jsir<cf_marker WhileStatementTest>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %1 = "jsir.boolean_literal"() <{value = true}> : () -> !jsir.any
// JSLIR-NEXT:     %2 = "builtin.unrealized_conversion_cast"(%1) : (!jsir.any) -> i1
// JSLIR-NEXT:     "cf.cond_br"(%2)[^bb2, ^bb4] <{operandSegmentSizes = array<i32: 1, 0, 0>}> : (i1) -> ()
// JSLIR-NEXT:   ^bb2:  // pred: ^bb1
// JSLIR-NEXT:     "jslir.control_flow_marker"(%0) <{kind = #jsir<cf_marker WhileStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %3 = "jslir.control_flow_starter"() <{kind = #jsir<cf_kind BlockStatement>}> : () -> !jsir.any
// JSLIR-NEXT:     "jslir.control_flow_marker"(%3) <{kind = #jsir<cf_marker BlockStatementDirectives>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%3) <{kind = #jsir<cf_marker BlockStatementBody>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.break_statement"() : () -> ()
// JSLIR-NEXT:     "cf.br"()[^bb4] : () -> ()
// JSLIR-NEXT:   ^bb3:  // no predecessors
// JSLIR-NEXT:     %4 = "jsir.identifier_ref"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %5 = "jsir.numeric_literal"() <{extra = #jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, value = 2.000000e+00 : f64}> : () -> !jsir.any
// JSLIR-NEXT:     %6 = "jsir.assignment_expression"(%4, %5) <{operator_ = "="}> : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%6) : (!jsir.any) -> ()
// JSLIR-NEXT:     "jslir.control_flow_marker"(%3) <{kind = #jsir<cf_marker BlockStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     "cf.br"()[^bb1] : () -> ()
// JSLIR-NEXT:   ^bb4:  // 2 preds: ^bb1, ^bb2
// JSLIR-NEXT:     "jslir.control_flow_marker"(%0) <{kind = #jsir<cf_marker WhileStatementEnd>}> : (!jsir.any) -> ()
// JSLIR-NEXT:     %7 = "jsir.identifier"() <{name = "console"}> : () -> !jsir.any
// JSLIR-NEXT:     %8 = "jsir.member_expression"(%7) <{literal_property = #jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 54, 57, 0, "log">}> : (!jsir.any) -> !jsir.any
// JSLIR-NEXT:     %9 = "jsir.identifier"() <{name = "x"}> : () -> !jsir.any
// JSLIR-NEXT:     %10 = "jsir.call_expression"(%8, %9) : (!jsir.any, !jsir.any) -> !jsir.any
// JSLIR-NEXT:     "jsir.expression_statement"(%10) : (!jsir.any) -> ()
// JSLIR-NEXT:   }, {
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:   }) : () -> ()
// JSLIR-NEXT: }) : () -> ()
// JSLIR-NEXT: jsir.file {[]} ({
// JSLIR-NEXT:   ^bb0:
// JSLIR-NEXT:       // <executable>
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT:     jsir.program {"script"} ({
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:         jsir.variable_declaration {"var"} ({
// JSLIR-NEXT:           ^bb0:
// JSLIR-NEXT:               // <executable>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %11 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:               // %11 = <unknown>
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %12 = jsir.numeric_literal {#jsir<numeric_literal_extra "3", 3.000000e+00 : f64>, 3.000000e+00 : f64}
// JSLIR-NEXT:               // %12 = 3.000000e+00 : f64
// JSLIR-NEXT:               // State [default = <unknown>] { }
// JSLIR-NEXT:             %13 = jsir.variable_declarator (%11, %12)
// JSLIR-NEXT:               // %13 = <uninitialized>
// JSLIR-NEXT:               // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:             jsir.exprs_region_end (%13)
// JSLIR-NEXT:               // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         })
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %0 = jslir.control_flow_starter {#jsir<cf_kind WhileStatement>}
// JSLIR-NEXT:           // %0 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb1:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%0) {#jsir<cf_marker WhileStatementTest>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %1 = jsir.boolean_literal {true}
// JSLIR-NEXT:           // %1 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %2 = builtin.unrealized_conversion_cast (%1)
// JSLIR-NEXT:           // %2 = true
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         cf.cond_br (%2) {array<i32: 1, 0, 0>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb2:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%0) {#jsir<cf_marker WhileStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %3 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// JSLIR-NEXT:           // %3 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%3) {#jsir<cf_marker BlockStatementDirectives>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%3) {#jsir<cf_marker BlockStatementBody>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.break_statement
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:       ^bb3:
// JSLIR-NEXT:           // <not executable>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %4 = jsir.identifier_ref {"x"}
// JSLIR-NEXT:           // %4 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %5 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// JSLIR-NEXT:           // %5 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         %6 = jsir.assignment_expression (%4, %5) {"="}
// JSLIR-NEXT:           // %6 = <uninitialized>
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jsir.expression_statement (%6)
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         jslir.control_flow_marker (%3) {#jsir<cf_marker BlockStatementEnd>}
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:         cf.br
// JSLIR-NEXT:           // State [default = <uninitialized>] { }
// JSLIR-NEXT:       ^bb4:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jslir.control_flow_marker (%0) {#jsir<cf_marker WhileStatementEnd>}
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %7 = jsir.identifier {"console"}
// JSLIR-NEXT:           // %7 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %8 = jsir.member_expression (%7) {#jsir<identifier   <L 6 C 8>, <L 6 C 11>, "log", 54, 57, 0, "log">}
// JSLIR-NEXT:           // %8 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %9 = jsir.identifier {"x"}
// JSLIR-NEXT:           // %9 = 3.000000e+00 : f64
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         %10 = jsir.call_expression (%8, %9)
// JSLIR-NEXT:           // %10 = <unknown>
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:         jsir.expression_statement (%10)
// JSLIR-NEXT:           // State [default = <unknown>] { <x#0 : 3.000000e+00 : f64> }
// JSLIR-NEXT:     }, {
// JSLIR-NEXT:       ^bb0:
// JSLIR-NEXT:           // <executable>
// JSLIR-NEXT:           // State [default = <unknown>] { }
// JSLIR-NEXT:     })
// JSLIR-NEXT:       // State [default = <unknown>] { }
// JSLIR-NEXT: })
// JSLIR-NEXT:   // State [default = <uninitialized>] { }
