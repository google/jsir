// SOURCE:      console.log(0);
// SOURCE-NEXT: function wrapper_1(x) {
// SOURCE-NEXT:   return prelude(x);
// SOURCE-NEXT: }
// SOURCE-NEXT: console.log(1);
// SOURCE-NEXT: function wrapper_2(x) {
// SOURCE-NEXT:   return wrapper_1(x);
// SOURCE-NEXT: }
// SOURCE-NEXT: console.log(2);
// SOURCE-NEXT: function wrapper_3(x) {
// SOURCE-NEXT:   return prelude(x + 100);
// SOURCE-NEXT: }
// SOURCE-NEXT: console.log(103);
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Prelude:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: function prelude(x) {
// SOURCE-NEXT:   return x;
// SOURCE-NEXT: }
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Dataflow:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: jsir.file ({
// SOURCE-NEXT:   ^bb0:
// SOURCE-NEXT:       // <executable>
// SOURCE-NEXT:       // State [default = <unknown>] { }
// SOURCE-NEXT:     jsir.program {"script"} ({
// SOURCE-NEXT:       ^bb0:
// SOURCE-NEXT:           // <executable>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %0 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %0 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %1 = jsir.member_expression (%0) {#jsir<identifier   <L 7 C 8>, <L 7 C 11>, "log", 71, 74, 0, "log">}
// SOURCE-NEXT:           // %1 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %2 = jsir.identifier {"prelude"}
// SOURCE-NEXT:           // %2 = #jsir_builtin<builtin_function "prelude">
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %3 = jsir.numeric_literal {#jsir<numeric_literal_extra "0", 0.000000e+00 : f64>, 0.000000e+00 : f64}
// SOURCE-NEXT:           // %3 = 0.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %4 = jsir.call_expression (%2, %3)
// SOURCE-NEXT:           // %4 = 0.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %5 = jsir.call_expression (%1, %4)
// SOURCE-NEXT:           // %5 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%5)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 9 C 9>, <L 9 C 18>, "wrapper_1", 98, 107, 2, "wrapper_1">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%24)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %25 = jsir.identifier {"prelude"}
// SOURCE-NEXT:               // %25 = #jsir_builtin<builtin_function "prelude">
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %26 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %26 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %27 = jsir.call_expression (%25, %26)
// SOURCE-NEXT:               // %27 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%27)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %6 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %6 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %7 = jsir.member_expression (%6) {#jsir<identifier   <L 12 C 8>, <L 12 C 11>, "log", 144, 147, 0, "log">}
// SOURCE-NEXT:           // %7 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %8 = jsir.identifier {"wrapper_1"}
// SOURCE-NEXT:           // %8 = #jsir_builtin<inline_expression_function  "x", 2, #jsir_builtin<inline_expression_call #jsir<symbol_id "prelude", 0>, #jsir<symbol_id "x", 2>>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %9 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// SOURCE-NEXT:           // %9 = 1.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %10 = jsir.call_expression (%8, %9)
// SOURCE-NEXT:           // %10 = 1.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %11 = jsir.call_expression (%7, %10)
// SOURCE-NEXT:           // %11 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%11)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 14 C 9>, <L 14 C 18>, "wrapper_2", 173, 182, 3, "wrapper_2">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%24)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %25 = jsir.identifier {"wrapper_1"}
// SOURCE-NEXT:               // %25 = #jsir_builtin<inline_expression_function  "x", 2, #jsir_builtin<inline_expression_call #jsir<symbol_id "prelude", 0>, #jsir<symbol_id "x", 2>>>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %26 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %26 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %27 = jsir.call_expression (%25, %26)
// SOURCE-NEXT:               // %27 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%27)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %12 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %12 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %13 = jsir.member_expression (%12) {#jsir<identifier   <L 17 C 8>, <L 17 C 11>, "log", 221, 224, 0, "log">}
// SOURCE-NEXT:           // %13 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %14 = jsir.identifier {"wrapper_2"}
// SOURCE-NEXT:           // %14 = #jsir_builtin<inline_expression_function  "x", 3, #jsir_builtin<inline_expression_call #jsir<symbol_id "wrapper_1", 0>, #jsir<symbol_id "x", 3>>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %15 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// SOURCE-NEXT:           // %15 = 2.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %16 = jsir.call_expression (%14, %15)
// SOURCE-NEXT:           // %16 = 2.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %17 = jsir.call_expression (%13, %16)
// SOURCE-NEXT:           // %17 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%17)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 19 C 9>, <L 19 C 18>, "wrapper_3", 250, 259, 4, "wrapper_3">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%24)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %25 = jsir.identifier {"prelude"}
// SOURCE-NEXT:               // %25 = #jsir_builtin<builtin_function "prelude">
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %26 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %26 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %27 = jsir.numeric_literal {#jsir<numeric_literal_extra "100", 1.000000e+02 : f64>, 1.000000e+02 : f64}
// SOURCE-NEXT:               // %27 = 1.000000e+02 : f64
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %28 = jsir.binary_expression (%26, %27) {"+"}
// SOURCE-NEXT:               // %28 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %29 = jsir.call_expression (%25, %28)
// SOURCE-NEXT:               // %29 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%29)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%24) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %18 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %18 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %19 = jsir.member_expression (%18) {#jsir<identifier   <L 22 C 8>, <L 22 C 11>, "log", 302, 305, 0, "log">}
// SOURCE-NEXT:           // %19 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %20 = jsir.identifier {"wrapper_3"}
// SOURCE-NEXT:           // %20 = #jsir_builtin<inline_expression_function  "x", 4, #jsir_builtin<inline_expression_call #jsir<symbol_id "prelude", 0>, #jsir_builtin<inline_expression_binary_expression #jsir<symbol_id "x", 4>, 1.000000e+02 : f64, "+">>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %21 = jsir.numeric_literal {#jsir<numeric_literal_extra "3", 3.000000e+00 : f64>, 3.000000e+00 : f64}
// SOURCE-NEXT:           // %21 = 3.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %22 = jsir.call_expression (%20, %21)
// SOURCE-NEXT:           // %22 = 1.030000e+02 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %23 = jsir.call_expression (%19, %22)
// SOURCE-NEXT:           // %23 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%23)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:     }, {
// SOURCE-NEXT:       ^bb0:
// SOURCE-NEXT:           // <executable>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:     })
// SOURCE-NEXT:       // State [default = <unknown>] { }
// SOURCE-NEXT: })
// SOURCE-NEXT:   // State [default = <uninitialized>] { }
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Bindings:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: wrapper_1#0:
// SOURCE-NEXT:     (x#2) => { prelude#0(x#2) }
// SOURCE-NEXT: wrapper_2#0:
// SOURCE-NEXT:     (x#3) => { wrapper_1#0(x#3) }
// SOURCE-NEXT: wrapper_3#0:
// SOURCE-NEXT:     (x#4) => { prelude#0((x#4 + 100)) }
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Computed constants:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: From [75, 85): `prelude(0)` -> `0`
// SOURCE-NEXT: From [148, 160): `wrapper_1(1)` -> `1`
// SOURCE-NEXT: From [225, 237): `wrapper_2(2)` -> `2`
// SOURCE-NEXT: From [306, 318): `wrapper_3(3)` -> `103`
// SOURCE-NEXT: ================================================================
