// SOURCE:      function foo(x) {
// SOURCE-NEXT:   return x + 1;
// SOURCE-NEXT: }
// SOURCE-NEXT: function bar(x) {
// SOURCE-NEXT:   return foo((x + 1) * 2);
// SOURCE-NEXT: }
// SOURCE-NEXT: function baz(f, x) {
// SOURCE-NEXT:   return f(x);
// SOURCE-NEXT: }
// SOURCE-NEXT: console.log(2);
// SOURCE-NEXT: console.log(7);
// SOURCE-NEXT: console.log(7);
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Prelude:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Dataflow:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: jsir.file ({
// SOURCE-NEXT:   ^bb0:
// SOURCE-NEXT:       // <executable>
// SOURCE-NEXT:       // State [default = <unknown>] { }
// SOURCE-NEXT:     jsir.program {"script"} ({
// SOURCE-NEXT:       ^bb0:
// SOURCE-NEXT:           // <executable>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 1 C 9>, <L 1 C 12>, "foo", 9, 12, 1, "foo">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%19)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %20 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %20 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %21 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// SOURCE-NEXT:               // %21 = 1.000000e+00 : f64
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %22 = jsir.binary_expression (%20, %21) {"+"}
// SOURCE-NEXT:               // %22 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%22)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 5 C 9>, <L 5 C 12>, "bar", 46, 49, 2, "bar">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%19)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %20 = jsir.identifier {"foo"}
// SOURCE-NEXT:               // %20 = #jsir_builtin<inline_expression_function  "x", 1, #jsir_builtin<inline_expression_binary_expression #jsir<symbol_id "x", 1>, 1.000000e+00 : f64, "+">>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %21 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %21 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %22 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// SOURCE-NEXT:               // %22 = 1.000000e+00 : f64
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %23 = jsir.binary_expression (%21, %22) {"+"}
// SOURCE-NEXT:               // %23 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %24 = jsir.parenthesized_expression (%23)
// SOURCE-NEXT:               // %24 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %25 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// SOURCE-NEXT:               // %25 = 2.000000e+00 : f64
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %26 = jsir.binary_expression (%24, %25) {"*"}
// SOURCE-NEXT:               // %26 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %27 = jsir.call_expression (%20, %26)
// SOURCE-NEXT:               // %27 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%27)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.function_declaration {false, false, #jsir<identifier   <L 9 C 9>, <L 9 C 12>, "baz", 94, 97, 3, "baz">} ({
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jsir.identifier_ref {"f"}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %20 = jsir.identifier_ref {"x"}
// SOURCE-NEXT:               // %20 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.exprs_region_end (%19, %20)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         }, {
// SOURCE-NEXT:           ^bb0:
// SOURCE-NEXT:               // <executable>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %19 = jslir.control_flow_starter {#jsir<cf_kind BlockStatement>}
// SOURCE-NEXT:               // %19 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementDirectives>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementBody>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %20 = jsir.identifier {"f"}
// SOURCE-NEXT:               // %20 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %21 = jsir.identifier {"x"}
// SOURCE-NEXT:               // %21 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             %22 = jsir.call_expression (%20, %21)
// SOURCE-NEXT:               // %22 = <unknown>
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jsir.return_statement (%22)
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:             jslir.control_flow_marker (%19) {#jsir<cf_marker BlockStatementEnd>}
// SOURCE-NEXT:               // State [default = <unknown>] { }
// SOURCE-NEXT:         })
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %0 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %0 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %1 = jsir.member_expression (%0) {#jsir<identifier   <L 13 C 8>, <L 13 C 11>, "log", 132, 135, 0, "log">}
// SOURCE-NEXT:           // %1 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %2 = jsir.identifier {"foo"}
// SOURCE-NEXT:           // %2 = #jsir_builtin<inline_expression_function  "x", 1, #jsir_builtin<inline_expression_binary_expression #jsir<symbol_id "x", 1>, 1.000000e+00 : f64, "+">>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %3 = jsir.numeric_literal {#jsir<numeric_literal_extra "1", 1.000000e+00 : f64>, 1.000000e+00 : f64}
// SOURCE-NEXT:           // %3 = 1.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %4 = jsir.call_expression (%2, %3)
// SOURCE-NEXT:           // %4 = 2.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %5 = jsir.call_expression (%1, %4)
// SOURCE-NEXT:           // %5 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%5)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %6 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %6 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %7 = jsir.member_expression (%6) {#jsir<identifier   <L 14 C 8>, <L 14 C 11>, "log", 153, 156, 0, "log">}
// SOURCE-NEXT:           // %7 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %8 = jsir.identifier {"bar"}
// SOURCE-NEXT:           // %8 = #jsir_builtin<inline_expression_function  "x", 2, #jsir_builtin<inline_expression_call #jsir<symbol_id "foo", 0>, #jsir_builtin<inline_expression_binary_expression #jsir_builtin<inline_expression_binary_expression #jsir<symbol_id "x", 2>, 1.000000e+00 : f64, "+">, 2.000000e+00 : f64, "*">>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %9 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// SOURCE-NEXT:           // %9 = 2.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %10 = jsir.call_expression (%8, %9)
// SOURCE-NEXT:           // %10 = 7.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %11 = jsir.call_expression (%7, %10)
// SOURCE-NEXT:           // %11 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%11)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %12 = jsir.identifier {"console"}
// SOURCE-NEXT:           // %12 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %13 = jsir.member_expression (%12) {#jsir<identifier   <L 15 C 8>, <L 15 C 11>, "log", 174, 177, 0, "log">}
// SOURCE-NEXT:           // %13 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %14 = jsir.identifier {"baz"}
// SOURCE-NEXT:           // %14 = #jsir_builtin<inline_expression_function  "f", 3,  "x", 3, #jsir_builtin<inline_expression_call #jsir<symbol_id "f", 3>, #jsir<symbol_id "x", 3>>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %15 = jsir.identifier {"bar"}
// SOURCE-NEXT:           // %15 = #jsir_builtin<inline_expression_function  "x", 2, #jsir_builtin<inline_expression_call #jsir<symbol_id "foo", 0>, #jsir_builtin<inline_expression_binary_expression #jsir_builtin<inline_expression_binary_expression #jsir<symbol_id "x", 2>, 1.000000e+00 : f64, "+">, 2.000000e+00 : f64, "*">>>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %16 = jsir.numeric_literal {#jsir<numeric_literal_extra "2", 2.000000e+00 : f64>, 2.000000e+00 : f64}
// SOURCE-NEXT:           // %16 = 2.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %17 = jsir.call_expression (%14, %15, %16)
// SOURCE-NEXT:           // %17 = 7.000000e+00 : f64
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         %18 = jsir.call_expression (%13, %17)
// SOURCE-NEXT:           // %18 = <unknown>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:         jsir.expression_statement (%18)
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:     }, {
// SOURCE-NEXT:       ^bb0:
// SOURCE-NEXT:           // <executable>
// SOURCE-NEXT:           // State [default = <unknown>] { }
// SOURCE-NEXT:     })
// SOURCE-NEXT:       // State [default = <unknown>] { }
// SOURCE-NEXT: })
// SOURCE-NEXT:   // State [default = <uninitialized>] { }
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Bindings:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: bar#0:
// SOURCE-NEXT:     (x#2) => { foo#0(((x#2 + 1) * 2)) }
// SOURCE-NEXT: baz#0:
// SOURCE-NEXT:     (f#3, x#3) => { f#3(x#3) }
// SOURCE-NEXT: foo#0:
// SOURCE-NEXT:     (x#1) => { (x#1 + 1) }
// SOURCE-NEXT: ================================================================
// SOURCE-EMPTY:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: Computed constants:
// SOURCE-NEXT: ================================================================
// SOURCE-NEXT: From [136, 142): `foo(1)` -> `2`
// SOURCE-NEXT: From [157, 163): `bar(2)` -> `7`
// SOURCE-NEXT: From [178, 189): `baz(bar, 2)` -> `7`
// SOURCE-NEXT: ================================================================
